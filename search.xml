<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown 学习笔记</title>
    <url>/2020/01/30/web-markdown-00013/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JavaScript 学习笔记（二）</title>
    <url>/2020/01/25/languages-javascript-02-00016/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>JavaScript 学习笔记（一）</title>
    <url>/2020/01/19/languages-javascript-01-00007/</url>
    <content><![CDATA[<p>JavaScript 是一种前端的开发语言，当然发展到现在也被用做后端的开发，比如借助于 Node.js。由于现在大量的前端框架会基于 JavaScript 和 Node.js，所以了解 JavaScript 是非常重要的。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>本笔记基于尚硅谷的《Javascript 基础班》</li>
</ul>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h3><ul>
<li>Javascript, JS 都指 Javascript</li>
<li>ES，Javascript 的标准</li>
</ul>
<h3 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul>
<li>number、string、boolean、undefined、null</li>
<li>number：NaN 也是数字值</li>
</ul>
<h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul>
<li>object</li>
</ul>
<h4 id="两种数据类型的区别"><a href="#两种数据类型的区别" class="headerlink" title="两种数据类型的区别"></a>两种数据类型的区别</h4><ul>
<li>JS 中的变量都是保存在栈内存中（变量名和变量值）。对于基本数据类型的变量，变量值接保存在栈内存中；</li>
<li>JS 的 Ojbect 变量本体保存在堆内存中，在栈内存保存了变量名和指向该 Object 的内存指针（对象引用）；</li>
<li>基本数据类型是值传递，赋值时两个值是各自独立的；</li>
<li>应用数据类型是指针传递，改变一个值的属性会影响另一个值的属性；</li>
<li>基本数据类型保存的是值，比较两个基本数据类型是比较值；应用数据类型保存的是对象的地址，比较两个对象是比较两个对象的地址。</li>
</ul>
<h3 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h3><h4 id="转成数字类型"><a href="#转成数字类型" class="headerlink" title="转成数字类型"></a>转成数字类型</h4><ul>
<li>字符串如果是纯数字，则转换成 number；</li>
<li>字符串如果包含字符，则转换成 NaN；</li>
<li>布尔值<code>true</code>转换成 1，<code>false</code>转换成 0；</li>
<li><code>null</code> 转换成 0；</li>
<li><code>undefined</code> 转换成 <code>NaN</code>；</li>
<li>对于任意类型的值，可以使用 Number 函数，也可以在被转换的值前面添上 <code>+</code>。</li>
</ul>
<h4 id="转成布尔类型"><a href="#转成布尔类型" class="headerlink" title="转成布尔类型"></a>转成布尔类型</h4><ul>
<li>字符串转布尔值，除了空字符串外，其余都是<code>true</code>；</li>
<li>数值转布尔值，除了 <code>0</code> 和 <code>NaN</code>，其余都是<code>true</code>；</li>
<li>null 和 undefined 转布尔值，都是 <code>false</code>；</li>
<li>对象转布尔值，都是<code>true</code>；</li>
<li>对任意类型的值，进行两次<code>!</code>操作。</li>
</ul>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符也称为操作符，对一个和多个值进行运算并取得运算结果，常见 JavaScript 运算符如下：</p>
<h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><code>typeof</code></h4><p>获得变量的类型，返回值是一个 string 类型的值。</p>
<h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>算数运算符共有 5 种：<code>+, -, *, /, %（取余/取模）</code>。</p>
<ul>
<li>null 转换为数字为 0；</li>
<li>2 + NaN = NaN；</li>
<li>两个字符串相加，两个字符串进行拼接；</li>
<li>任何值和字符串做加法，都是进行字符串的拼接；</li>
<li>两个数字字符串进行其他运算，运行对应数字的四则运算（只有加法进行字符串的拼接）；  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">c = <span class="number">1</span> + <span class="number">2</span> + <span class="string">'3'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>(c);				<span class="comment">// 结果是 “33”</span></span></pre></td></tr></table></figure></li>
<li>/: 取余。</li>
</ul>
<h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><ul>
<li>一元运算符共有 2 种：<code>+, -（取反）</code>；</li>
<li>一元运算符会把值转换为 number 类型，然后再进行运算；</li>
<li>一元运算符的作用，把字符串类型的值，转成数字值。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"5"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> +a);			<span class="comment">// 输出为 number</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"abcd"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(+a);			<span class="comment">// 输出为 NaN</span></span></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h4><p>自增自减运算符共有两种：<code>++, --</code>。</p>
<ul>
<li>++a 和 a++ 的主要区别主要在赋值语句中（表达式的值不一样），++a 先自增再赋值；a++ 先赋值再自增；  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">c++;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(c++)      			<span class="comment">// 输出 11</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="number">20</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = d++ + ++d + d;		<span class="comment">// result = 64</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="number">20</span>;		</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = d++;				<span class="comment">// d = 20; 等价于 e = d++; d = e</span></span></pre></td></tr></table></figure></li>
<li>—a 和 a—，自减。<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4></li>
<li>返回值：逻辑运算符的返回值比较复杂，根据操作数和操作步骤共同确定；<ul>
<li>如果两个操作数都是布尔值，则返回值为布尔值；</li>
<li>如果其中有一个操作数不是布尔值，则返回值根据短路的结果而不相同；<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b result;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">-2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!a);			<span class="comment">// 输出为 false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">a = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">b = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a &amp;&amp; b);			<span class="comment">// 输出为 false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">b = <span class="number">5</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a &amp;&amp; b);			<span class="comment">// 输出为 5</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a || b);			<span class="comment">// 输出为 true</span></span></pre></td></tr></table></figure></li>
</ul>
</li>
<li>逻辑运算符共有三种：<code>!, &amp;&amp;, ||</code>；</li>
<li><code>!</code>，对一个布尔值取反操作，不等于 0 的数值都为<code>true</code>；</li>
<li>两个操作数都是布尔值的逻辑运算规则如下：<ul>
<li><code>&amp;&amp;</code>，两个值都为<code>true</code>，返回值为<code>true</code>，否则返回值为<code>false</code>;<ul>
<li>如果第一个值为<code>false</code>，不会计算第二个值。</li>
</ul>
</li>
<li><code>||</code>，两个值都为<code>false</code>，返回值为<code>false</code>，否则返回为<code>true</code>；<ul>
<li>如果第一个值为<code>true</code>，不会计算第二个值。</li>
</ul>
</li>
</ul>
</li>
<li>如果有一个操作数不是布尔值的逻辑运算规则如下：<ul>
<li>对于非布尔值的逻辑与运算，系统先将其转换为布尔值，进行运算，并且返回原值；<ul>
<li>如果两个值都是<code>true</code>，则返回后面的值；</li>
<li>如果两个值都是<code>false</code>，则返回前面的值；</li>
<li>这个情况是和短路计算的规则有关。</li>
</ul>
</li>
<li>对于非布尔值的逻辑或运算，系统先将其转换为布尔值，进行运算，并且返回原值。<ul>
<li>如果两个值都是<code>false</code>，则返回后面的值；</li>
<li>其余情况，返回第一个<code>true</code>的值；</li>
<li>同样是和短路计算的规则有关。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">2</span> &amp;&amp; <span class="number">1</span>, a;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);		<span class="comment">// 对于 true，输出值为 1（返回后面的值）</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">result = <span class="number">0</span> &amp;&amp; <span class="number">1</span>；</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);		<span class="comment">// 对于 false，输出值为 0</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> || <span class="literal">null</span>)		<span class="comment">// 输出为 null</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="literal">null</span>)		<span class="comment">// 输出值为 0</span></span></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ul>
<li>返回值：就是赋值运算符右边的值；</li>
<li><code>=</code>右侧的值赋值给左侧的变量；</li>
<li><code>+=</code>左侧变量的值和右侧的值相加，赋值给左侧的变量；</li>
<li><code>-=</code>左侧变量的值和右侧的值相减，赋值给左侧的变量；</li>
<li><code>*=</code>、<code>/=</code>、<code>%=</code>和另外两个类似。</li>
</ul>
<h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><ul>
<li>返回值：布尔值。通过关系运算符比较两个值的大小，关系成立，返回<code>true</code>，不成立返回<code>false</code>；</li>
<li><code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>，四个关系运算符；</li>
<li>如果一侧是数值，另一侧是字符（<code>1 &gt; &quot;0&quot;</code>），会把非数值转换为数值，返回比较结果；</li>
<li>如果两侧都是字符串，不会将其转换数值进行比较，而是分别比较字符串中字符的 unicode 编码。在电子商务的应用中，要特别小心。因为用户输入的都是字符串，如果两个字符串比较就很容易出错。解决方案是利用一元运算符或者 Number 函数把 string 转换为 number 类型；</li>
<li>任何值（包括<code>NaN</code>）和<code>NaN</code> 做任何比较，都返回<code>false</code>；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">-1</span> &gt;= <span class="string">"0"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);			<span class="comment">// 返回 false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> &gt;= <span class="literal">NaN</span>);			<span class="comment">// 返回 false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"11"</span> &lt; <span class="string">"5"</span>);			<span class="comment">// 返回 true</span></span></pre></td></tr></table></figure>
<h4 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h4><ul>
<li>返回值：布尔值。四个相等运算符<code>==, ===, !=, !==</code>；</li>
<li>使用<code>==</code>，如果类型不同，会进行自动类型转换，大部分情况会转换为数字；</li>
<li>undefined 衍生自 null，这两个值做<code>==</code>比较时，会返回<code>true</code>;</li>
<li>null 和数字比较时，不进行自动类型转换，永远都返回<code>false</code>；</li>
<li>NaN 不和任何值相等，包括他自己。需要通过 isNaN() 函数判断一个值是否为 NaN；</li>
<li>使用<code>!=</code>，判断两个值不相等，如果类型不同，会进行自动类型转换。</li>
<li><code>===</code>表示全等，不做自动类型转换，类型不等的情况下，直接返回<code>false</code>；</li>
<li><code>!==</code>表示不全等，不做自动类型转换。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">console.log(<span class="string">"1"</span> == 1);			// 返回 <span class="literal">true</span>，进行了自动类型转换</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(<span class="string">"true"</span> == <span class="string">"1"</span>);		// 返回 <span class="literal">true</span>，字符串和布尔值都转成 number</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(<span class="string">"true"</span> == <span class="string">"2"</span>);		// 返回 <span class="literal">false</span>，字符串和布尔值都转成 number</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">console.log(null == 0);			// 返回 <span class="literal">false</span>，null 没有转成数字</span></pre></td></tr></table></figure>
<h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><p>条件运算符也叫三元运算符。</p>
<ul>
<li>条件表达式 ? 语句 1 : 语句 2，条件表达式求布尔值后，<code>true</code> 执行语句 1，<code>false</code>执行语句 2</li>
<li>如果条件表达式是一个非布尔值，Javascript 会将其转换为布尔值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var a = 30, b = 40, c = 50;</span></pre></td></tr><tr><td class="code"><pre><span class="line">max = a &gt; b ? a &gt; c ? a : c : b &gt; c ? b : c;</span></pre></td></tr></table></figure>
<h4 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h4><ul>
<li>数学运算：括号内先，括号外后，先乘除，后加减；</li>
<li>遇到搞不清楚的优先级，可以用括号强制；</li>
<li>常用优先级：<ul>
<li>new, [], . ；</li>
<li>()；</li>
<li>自增运算符：++, —；</li>
<li>单目运算符：!, +, -, ~, typeof, void, delete；</li>
<li>乘除运算符：*, /, %；</li>
<li>双目运算符：+, -；</li>
<li>移位运算符：</li>
<li>比较运算符：&gt;, &gt;=, &lt;, &lt;=；</li>
<li>相等运算符：==, !=, ===；</li>
<li>逻辑与运算符：&amp;&amp;；</li>
<li>逻辑或运算符：||；</li>
<li>条件运算符：?:；</li>
<li>赋值运算符：=, +=, -=, *=, /=, %=。</li>
</ul>
</li>
</ul>
<h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><ul>
<li>条件成立执行某些语句，条件不成立则不执行这些语句，或者执行其他语句；</li>
<li>语法：<ul>
<li>如果条件表达式的值为<code>true</code>，执行语句块，如果为<code>false</code>，则不执行语句块；<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  语句块；</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>如果条件表达式的值为<code>true</code>，执行语句块 1，如果为<code>false</code>，执行语句块 2；  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  语句块 <span class="number">1</span>；</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  语句块 <span class="number">2</span>；</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>多个条件表达式的判断，当语句执行时，会从上到下对条件表达式进行求值判断，如果值为<code>true</code>，则执行当前语句块，值为<code>false</code>则继续向下判断。该语句只会有一个代码块执行，执行完后，就会跳出整个 if 语句；  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式 <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  语句块 <span class="number">1</span>；</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式 <span class="number">2</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  语句块 <span class="number">2</span>；</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式 n) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  语句块 n;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  语句块；</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>举例</p>
<ul>
<li><p>举例 1: 成绩 100 时，输出”你真优秀“，当成绩为 80~99，输出“你真棒”，当成绩为 60～80 时，输出“继续努力啊”，其它，输出“你要注意了”；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">a = prompt(<span class="string">"请输入成绩："</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == <span class="number">100</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"你真优秀"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; <span class="number">80</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"你真棒"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; <span class="number">60</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"继续努力啊"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"你要注意了"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>举例2: 键盘上输入三个整数，按照从小到达排列。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c, min, med, max;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	a = +prompt(<span class="string">"请输入第一个数："</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	b = +prompt(<span class="string">"请输入第二个数："</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	c = +prompt(<span class="string">"请输入第三个数："</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (a &lt; b &amp;&amp; a &lt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		min = a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &lt; a &amp;&amp; b &lt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		min = b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		min = c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (a &gt; b &amp;&amp; a &gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		max = a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &gt; a &amp;&amp; b &gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		max = b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		max = c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (a &gt; b &amp;&amp; a &lt; c || a &lt; b &amp;&amp; a &gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		med = a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &gt; a &amp;&amp; b &lt; c || b &lt; a &amp;&amp; b &gt; c) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		med = b;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		med = c;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">	alert (<span class="built_in">String</span>(min) + med + max);</span></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><ul>
<li>语法：<ul>
<li>执行对应表达式中后包含的所有语句块，所以需要用 break 跳出 switch 分支语句。如果都没有则执行 default 包含的语句块；<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (条件表达式) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">case</span> 表达式 <span class="number">1</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    语句块;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">case</span> 表达式 <span class="number">2</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    语句块;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">case</span> 表达式 n:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    语句块;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">    语句块;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
</ul>
</li>
<li>举例：<ul>
<li>举例 1：成绩大于 60 分，输出“你合格了！”<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> score;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">score  = +prompt(<span class="string">"请输入成绩："</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (score &gt;= <span class="number">60</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">case</span> <span class="literal">true</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">console</span>.log(<span class="string">"你合格了"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">case</span> <span class="literal">false</span>:</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="built_in">console</span>.log(<span class="string">"你挂了！"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>循环语句可以反复执行一段代码。创建一个循环，一般需要三个步骤：</p>
<ul>
<li>初始化表达式：初始化一个变量；</li>
<li>条件表达式：在循环中设置和该变量相关的条件表达式；</li>
<li>更新表达式：在循环体中，改变这个变量值；</li>
</ul>
<h4 id="while-循环语句"><a href="#while-循环语句" class="headerlink" title="while 循环语句"></a>while 循环语句</h4><ul>
<li>while 语句先对表达式执行求值判断，如果为<code>true</code>则执行循环体内的语句。循环体执行完后，会返回对表达式执行求值判断，直到条件判断表达式结果为<code>false</code>；</li>
<li>死循环（条件表达式永远为<code>true</code>）在开发的时候要尽量避免。一种办法是利用 <code>break</code> 退出；</li>
<li>do…while 是先执行再判断，这个语句保证循环体至少被执行一次。</li>
</ul>
<h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  语句块;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(条件表达式)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	  <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  语句块;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span></pre></td></tr></table></figure>
<h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><ul>
<li>举例 1：年利率5%，从 1000 元变到 5000 元要多少时间。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum, year;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">sum = <span class="number">1000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">year = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (sum &lt; <span class="number">5000</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  sum = sum * <span class="number">1.05</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  year++;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"year: "</span> + year);</span></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h4><ul>
<li>for 循环将三个表达式放在 for 后面的括号中，其中初始化表达式只会执行一次；</li>
<li>for 循环的三个部分都可以移到括号的外面；</li>
</ul>
<h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式; 条件表达式; 更新表达式) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  语句块;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr></table></figure>
<h5 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h5><ul>
<li><p>举例 1：打印 1～100 之间所有奇数之和。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i = i + <span class="number">2</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	sum = sum + i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(i + <span class="string">": "</span> + sum);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>
</li>
<li><p>举例 2：打印水仙花数。</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum;</span></pre></td></tr><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> i_1, i_2, i_3;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">sum = <span class="number">1000</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  i_1 = <span class="built_in">parseInt</span>(i/<span class="number">100</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  i_2 = <span class="built_in">parseInt</span>((i - i_1 * <span class="number">100</span>)/<span class="number">10</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  i_3 = (i - i_1 * <span class="number">100</span> - i_2 * <span class="number">10</span>)</span></pre></td></tr><tr><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="code"><pre><span class="line">  sum = <span class="built_in">Math</span>.pow(i_1, <span class="number">3</span>) + <span class="built_in">Math</span>.pow(i_2, <span class="number">3</span>) + <span class="built_in">Math</span>.pow(i_3, <span class="number">3</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span>(sum == i) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(i);</span></pre></td></tr><tr><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li>
<li>举例 3：打印 1000 以内的质数  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> primeArr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x, isPrime;</span></pre></td></tr><tr><td class="code"><pre><span class="line">primeArr[<span class="number">0</span>] = <span class="number">2</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">3</span>; i &lt;= <span class="number">1000</span>; i = i + <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	isPrime = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">for</span> (x <span class="keyword">in</span> primeArr) &#123;			<span class="comment">// x 是一个索引值</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">		<span class="keyword">if</span> (i % primeArr[x] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			isPrime = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">			<span class="keyword">break</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="keyword">if</span> (isPrime == <span class="literal">true</span>)&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">		primeArr[primeArr.length] = i;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#125; </span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> primeArr) &#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(primeArr[x]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(primeArr.length);</span></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="常见基本函数"><a href="#常见基本函数" class="headerlink" title="常见基本函数"></a>常见基本函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">c = <span class="built_in">String</span>(c);				<span class="comment">// 将 c 转换为字符串</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c = <span class="built_in">Number</span>(c);				<span class="comment">// 将 c 转换为数字</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="literal">NaN</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(b);				<span class="comment">// 返回 true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">c = prompt()				<span class="comment">// 提示用户输入信息，返回类型是 string</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">c = <span class="built_in">parseInt</span>(<span class="number">9.9</span>)			<span class="comment">// 对 9.9 取整为 9</span></span></pre></td></tr></table></figure>
<h3 id="unicode-编码"><a href="#unicode-编码" class="headerlink" title="unicode 编码"></a>unicode 编码</h3><ul>
<li>在 JavaScript 中使用 unicode，引用格式<code>\u0054</code></li>
<li>在网页中使用 unicode，使用<code>&amp;#&lt;code&gt;</code>，code 需要十进制</li>
</ul>
<h2 id="中级概念"><a href="#中级概念" class="headerlink" title="中级概念"></a>中级概念</h2><h3 id="对象编程"><a href="#对象编程" class="headerlink" title="对象编程"></a>对象编程</h3><h4 id="对象的基本概念"><a href="#对象的基本概念" class="headerlink" title="对象的基本概念"></a>对象的基本概念</h4><ul>
<li>对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</li>
<li>对象的种类：<ul>
<li>内建对象，在 ES 标准中定义的对象。在任何 ES 的实现中都可以使用；</li>
<li>宿主对象，由 JS 运行环境提供的对象。比如浏览器提供的对象组，DOM 对象模型，BOM 对象模型；</li>
<li>自定义对象，由开发人员自己创建的对象。</li>
</ul>
</li>
</ul>
<h4 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h4><ul>
<li>属性名不要求执行标识符的命名规范，但是从规范的角度，尽量按照标识符的规范；</li>
<li>访问属性名有两种方法，<code>&lt;对象名&gt;.&lt;属性名&gt;</code>和<code>&lt;对象名&gt;[&quot;&lt;属性名&gt;&quot;]</code>。第二种方法比较方便，可以利用变量传递属性名；<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.gender);</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">"gender"</span>]);</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">a = <span class="string">'name'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj[a]);</span></pre></td></tr></table></figure></li>
<li>对象的属性值可以是任意的数据类型；<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>(), obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj1.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj1.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">obj2.pointer = obj1;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj2.pointer.name);</span></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="对象的语法"><a href="#对象的语法" class="headerlink" title="对象的语法"></a>对象的语法</h4><ul>
<li>创建对象（两种方式）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();			<span class="comment">// new 关键字调用对象的构造函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"猪八戒"</span>, <span class="attr">age</span>:<span class="number">12</span>&#125;;	<span class="comment">// 名和值之间用:，名值对间用,，最后一个属性不要加,</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">"age"</span>]);</span></pre></td></tr></table></figure></li>
<li>向对象添加属性（对象中保存的值）：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj);</span></pre></td></tr></table></figure></li>
<li><p>读取对象的属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.gender);</span></pre></td></tr></table></figure>
<p>读取对象中不存在的属性，不会报错，会返回<code>undefined</code>。</p>
</li>
<li><p>删除对象的属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.gender);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span>.obj.gender;</span></pre></td></tr></table></figure>
</li>
<li><p>检查对象是否含有指定的属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line">obj.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"sex"</span> <span class="keyword">in</span> obj);		<span class="comment">// 返回 false</span></span></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="常见的对象"><a href="#常见的对象" class="headerlink" title="常见的对象"></a>常见的对象</h4><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="基本概念-1"><a href="#基本概念-1" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li>函数中可以封装功能（代码块），函数可以在需要的时候被重复调用；</li>
<li>函数实际上也是一个对象。但是用typeof，返回的是<code>function</code>。函数对象拥有对象的一切性质；</li>
<li>函数可以使用<code>new</code>构造，传入的参数是函数要执行的代码。在构造时，函数的代码不会立即执行，函数的代码会在函数被调用时执行；</li>
<li>可以在函数的 () 中来指定多个形参，多个形参之间用 , 分隔，声明形参相当于在函数中声明了变量；</li>
<li>可以在函数调用时指定实参；<ul>
<li>需要注意解释器不会检查数据类型，所以要注意检查是否会接收到非法的参数；</li>
<li>同样解析器也不会检查实参的数量，多余的实参不会被赋值；</li>
<li>如果实参数量少于形参数量，没有对应实参的形参将是<code>undefined</code>；</li>
<li>被传递的实参可以是任意数据类型。</li>
</ul>
</li>
<li>可以使用 return 设置返回值。return 之后的函数语句不被执行；</li>
</ul>
<h4 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h4><ul>
<li><p>函数的定义（三种方法）和执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法 1：构造函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.log('Hello Javascript!')"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">fun();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 方法 2：函数声明，function 函数名([形参1, 形参2, ...])</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="string">"这是我定义的函数"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fun2();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment">// 方法 3：使用函数表达式来创建一个函数</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(<span class="string">"我是一个匿名函数"</span>);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="code"><pre><span class="line">fun3();</span></pre></td></tr></table></figure>
</li>
<li><p>函数传递参数（形参）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	<span class="built_in">console</span>.log(a + b);</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">sum(<span class="number">3</span>, <span class="number">5</span>);</span></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul>
<li>数组是一个对象，用不同的元素存储一些值，数组使用数字作为索引来操作元素（对象属性）；</li>
<li>数组的性能比普通对象要好，所以我们经常使用数组来来存储数据；</li>
<li>数组的索引从 0 开始；</li>
</ul>
<h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><ul>
<li>声明数组、给数组元素赋值和获得数组元素的值；<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法 1：构造数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="string">"hello"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span></pre></td></tr></table></figure></li>
<li>获取数组的长度<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法 1：构造数组</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="string">"hello"</span>;</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3>]]></content>
      <categories>
        <category>开发语言</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 学习笔记（三）</title>
    <url>/2020/01/03/linux-basic003-00009/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 学习笔记（二）</title>
    <url>/2019/12/30/linux-basic002-00008/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 学习笔记（一）</title>
    <url>/2019/12/24/linux-basic001-00005/</url>
    <content><![CDATA[<p>Linux 我应该是努力过多次，始终只是皮毛。这次还是打算全面的了解 Linux 的运维技术和最新的技术趋势。采用的 os 版本是 centos 7.x。</p>
<h2 id="目录结构和分区"><a href="#目录结构和分区" class="headerlink" title="目录结构和分区"></a>目录结构和分区</h2><p>如果一个硬盘采用 MBR 分区，这个硬盘最多只能有四个主分区或者扩展分区（扩展分区最多一个），一个扩展分区上可以有若干个逻辑分区</p>
<ul>
<li>对于 Linux 来说，一个 SATA 硬盘，前面四个分区是供主分区和扩展分区使用，分别为 /dev/sda1 ~ /dev/sda4。逻辑分区从 /dev/sda5 开始。</li>
</ul>
<a id="more"></a>
<p>我们在一个新的硬盘上安装 Linux，一般会做如下考虑：</p>
<ul>
<li>一个 /boot 区，一般 200M 左右，安装 Linux 的 Kernel 文件。单独一个区，在系统出现问题的时候会比较好解决；</li>
<li>一个 swap 分区，一般是内存的2倍以上，不大于 8G；</li>
<li>一个 / 分区，一般 10G 以上；</li>
<li>剩下的可以给 /data，作为数据分区。</li>
</ul>
<h2 id="Linux-的硬件设置"><a href="#Linux-的硬件设置" class="headerlink" title="Linux 的硬件设置"></a>Linux 的硬件设置</h2><h3 id="时间设置"><a href="#时间设置" class="headerlink" title="时间设置"></a>时间设置</h3><ul>
<li>Linux 有两个时间，一个是 BIOS 中，一个是操作系统的时间，这两个时间可以一致，也有可能不一致。其中<code>clock</code>指令用于修改 BIOS 硬件时间，<code>date</code>指令用于修改操作系统时间；</li>
<li>和 ntp 服务器同步时间，<code># ntpdate &lt;ntp server ip&gt;</code>；</li>
<li>centos 6.x ~ 7.x 配置 <code>/etc/ntp.conf</code>，添加<code>server x.x.x.x iburst</code>。然后启动 ntp 的服务；<ul>
<li>6.x: <code># service ntpd start</code>；</li>
<li>7.x: <code># systemctl start ntpd</code>；</li>
</ul>
</li>
<li>centos 7.x 也可以配置 <code>/etc/chrony.conf</code>；</li>
<li>时区的配置信息在<code>/etc/localtime</code>文件中<ul>
<li>7.x: <code># localectl list-locales</code>，列出所有支持的语言和时区配置；<code># localectl status</code>，列出当前的设置</li>
</ul>
</li>
</ul>
<h3 id="网卡设置"><a href="#网卡设置" class="headerlink" title="网卡设置"></a>网卡设置</h3><ol>
<li>centos 7.x 更改了网卡缺省的名字，如果修改网卡名称符合以前的命名规则，需要修改<code>grub.cfg</code>这个文件的设置。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim /boot/grub2/grub.cfg</span></span></pre></td></tr></table></figure>
寻找 menuentry 下的 linux16，增加<code>net.ifnames=0</code>，重新启动。</li>
</ol>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h2 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h2><h2 id="软件包安装"><a href="#软件包安装" class="headerlink" title="软件包安装"></a>软件包安装</h2><h2 id="Linux-常用简单命令集"><a href="#Linux-常用简单命令集" class="headerlink" title="Linux 常用简单命令集"></a>Linux 常用简单命令集</h2><h3 id="查看系统状态"><a href="#查看系统状态" class="headerlink" title="查看系统状态"></a>查看系统状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 查看硬件状态</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># free -h				// 以 M 为单位看系统内存</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># lsblk					// 系统的分区情况和外置设备的挂载状况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># lscpu					// 看 CPU 的情况</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># cat /proc/meminfo			// 获得和内存相关的信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// 查看操作系统</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/centos-release   		// 安装的 centos 版本</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># lsb_relase -a    			// 安装的 centos 版本</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># uname -r        			// 内核的版本</span></span></pre></td></tr></table></figure>
<h3 id="与-shell-相关"><a href="#与-shell-相关" class="headerlink" title="与 shell 相关"></a>与 shell 相关</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tty      				// 当前终端名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># who     				// 当前登陆本服务器所有的终端名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># whoami   			 	// 我是谁，简略信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># who am i   				// 我是谁更详细的信息，包括登陆的终端名和 IP 地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># echo $SHELL 		 		// 当前运行的 Shell</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># cat /etc/shells 			// 当前系统支持的所有 Shell，对于/usr/sbin/nologin shell，主要是给应用程序使用。不可以登陆</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># echo $PS1				// 命令提示符设置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># PS1="[\u@\h]$"    			//去掉 working directory</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># PS1="\[\e[1;5;41;33m\][\u@\h \w]\\$\[\e[0m\]"    	// 对于生产环境建议用特别的提示标识，5表示闪烁</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># which &lt;command&gt;</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># whereis &lt;command&gt;     		// 和该命令相关的一些文档信息</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># hash          			//当前被缓存的命令路径</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># alias cdnet = "cd /etc/sysconfig/network-scripts/"   // 别名一般保存在用户家目录中的 .bashrc 中</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># unalias &lt;别名&gt;     		 	// 取消别名</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># . .bashrc    				// 使修改后的 .bashrc 立即生效，等同于 source .bashrc</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># enable       				// 显示当前 shell 的内部命令列表</span></span></pre></td></tr></table></figure>
<h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 时区、时间语言和地区有关指令</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># clock -w				// copy 操作系统的时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># clock -s				// write 时间到操作系统</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># date mmddhhmmyyyy.ss			// 设置操作系统的时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># ntpdate &lt;ip&gt;				// 同步时间</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># localectl list-locales		// 列出支持的所有地区设置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># localectl status			// 语言设置</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># timedatectl list-timezones		// 支持的时区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># timedatectl status			// 当前时区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># timedatectl set-timezone &lt;时区名&gt;	// 设置时区</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># cal					// 本月日历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># cal -y				// 本年日历</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// 查看网卡信息</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># ifconfig    				// 看网卡地址</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// 关机</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># poweroff				// 关机</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># halt					// 关机</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># shutdown -r +3			// 关机或者重启，可以指定时间。本例中，3 分钟后重启</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># shutdown -c				// 取消指定时间的关机</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">// 安装下载软件</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh &lt;package name&gt;		// 安装已下载的 rpm 包</span></span></pre></td></tr></table></figure>
<h3 id="用户管理-1"><a href="#用户管理-1" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># w 					// 查看当前有哪些用户登陆到本机，以及正在执行的操作</span></span></pre></td></tr></table></figure>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何建立一个类似这样的网站（三）</title>
    <url>/2019/12/19/web-howtobuildthisblog03-00004/</url>
    <content><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>这一部分，我们的主要目标如下：</p>
<ul>
<li>对已经安装好的博客系统进行必要的优化工作<ul>
<li>功能上的优化</li>
<li>形式上的优化</li>
<li>具体功能的配置，比如修改颜色之类</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="功能上的优化"><a href="#功能上的优化" class="headerlink" title="功能上的优化"></a>功能上的优化</h3><ul>
<li>将主页展示的内容进行缩减</li>
<li>在主页上隐藏指定的文章</li>
<li>鼠标指针在非工作区有趣的图形</li>
<li>每篇文章增加字数统计和阅读时间估计</li>
<li>配置搜索（search）功能</li>
<li>加入豆瓣的页面</li>
<li>增加文章密码的功能</li>
</ul>
<h3 id="形式上的优化"><a href="#形式上的优化" class="headerlink" title="形式上的优化"></a>形式上的优化</h3><h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><ul>
<li>这篇文章只包括了我所感兴趣的 Hexo 设置，在网络上还有很多其他朋友的设置，有兴趣的可以到处看看</li>
<li>很多设置有不止一种方法，我采用的办法不见得最好，但是保证在我的博客上是工作的</li>
<li>Hexo 和 Next 也在不断发展，部分配置文件也在不断变化之中。我的 Hexo 版本是4.0，Next 的版本是7.6.0</li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="http://yearito.cn/posts/hexo-advanced-settings.html" target="_blank" rel="noopener">1. Hexo 搭建个人博客系列：进阶设置篇</a><br><a href="http://blog.smallerpig.com/set-hexo-show-more-button-on-indexpage.html" target="_blank" rel="noopener">2. 让hexo的首页只显示文章的部分内容而不是全部</a><br><a href="https://www.jianshu.com/p/79fe9fb9dfa0" target="_blank" rel="noopener">3. Hexo 设置首页隐藏指定文章</a><br><a href="https://blog.csdn.net/weixin_39345384/article/details/80544660" target="_blank" rel="noopener">4. NexT v6.0+ 背景动画Canvas_nest设置无效的解决方案</a></p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="功能上的优化-1"><a href="#功能上的优化-1" class="headerlink" title="功能上的优化"></a>功能上的优化</h3><h4 id="主页内容缩减"><a href="#主页内容缩减" class="headerlink" title="主页内容缩减"></a>主页内容缩减</h4><p>在<a href="http://blog.smallerpig.com/set-hexo-show-more-button-on-indexpage.html" target="_blank" rel="noopener">资源1</a>中介绍了三种方法，我个人使用第2种方法，在文章中加入<code>&lt;!--more--&gt;</code>这种方法比较多，主要是可以比较精确的控制。</p>
<h4 id="隐藏指定文章"><a href="#隐藏指定文章" class="headerlink" title="隐藏指定文章"></a>隐藏指定文章</h4><p>有的时候，我的文章尚未完成，但是可能已经发布到自己的 github 仓库，这个时候实际上所有人都可以看到这篇文章。一种变通的解决方案是把这篇文章从主页中隐藏，这样就不会浪费别人的时间了。<br>与<a href="https://www.jianshu.com/p/79fe9fb9dfa0" target="_blank" rel="noopener">资源2</a>的方法类似我采用的方案是在开头增加一个 visible 参数，visible 为 true 在主页可见，false 在主页不可见。然后修改主题的index.swig 文件。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi index.swig \\ 路径：blog\themes\next\layout\</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> post.hidden != <span class="literal">false</span> %&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">	&#123;&#123; post_template.render(post, <span class="literal">true</span>) &#125;&#125;</span></pre></td></tr><tr><td class="code"><pre><span class="line">&#123;% endif %&#125;</span></pre></td></tr></table></figure></p>
<h4 id="鼠标指针在非工作区"><a href="#鼠标指针在非工作区" class="headerlink" title="鼠标指针在非工作区"></a>鼠标指针在非工作区</h4><ul>
<li>我的 Next 6.0 将<code>canvas_nest: true</code>后，确实没有效果。需要根据<a href="https://blog.csdn.net/weixin_39345384/article/details/80544660" target="_blank" rel="noopener">资源3</a>的方法，从 github 上 clone 相应的 js 文件后，该功能才能启用。  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi _config.yml   // 在自己的 blog 目录下</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">// 设置如下：canvas_nest: <span class="literal">true</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># cd themes/next    // 从自己的 blog 目录下，进入theme/next目录</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest  从 github clone 对应的 js 文件</span></span></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="字数统计、阅读时长"><a href="#字数统计、阅读时长" class="headerlink" title="字数统计、阅读时长"></a>字数统计、阅读时长</h4><ul>
<li>安装插件：  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span></pre></td></tr></table></figure></li>
<li>主题配置信息如下:  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  separated_meta: true  # false 会显示一行</span></pre></td></tr><tr><td class="code"><pre><span class="line">  item_text_post: true  # 显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字</span></pre></td></tr><tr><td class="code"><pre><span class="line">  item_text_total: true #底部footer是否显示字数统计属性文字</span></pre></td></tr><tr><td class="code"><pre><span class="line">  awl: 4 #计算字数的一个设置,没设置过</span></pre></td></tr><tr><td class="code"><pre><span class="line">  wpm: 75 #一分钟阅读的字数</span></pre></td></tr></table></figure>
  站点配置新增如下:  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">symbols_count_time:</span></pre></td></tr><tr><td class="code"><pre><span class="line"> #文章内是否显示</span></pre></td></tr><tr><td class="code"><pre><span class="line">  symbols: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">  time: true</span></pre></td></tr><tr><td class="code"><pre><span class="line"> # 网页底部是否显示</span></pre></td></tr><tr><td class="code"><pre><span class="line">  total_symbols: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">  total_time: true</span></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="配置搜索功能"><a href="#配置搜索功能" class="headerlink" title="配置搜索功能"></a>配置搜索功能</h4><ul>
<li>安装插件：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span></pre></td></tr></table></figure></li>
<li><p>Hexo 站点配置文件如下：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  path: search.xml</span></pre></td></tr><tr><td class="code"><pre><span class="line">  field: post</span></pre></td></tr><tr><td class="code"><pre><span class="line">  format: html</span></pre></td></tr><tr><td class="code"><pre><span class="line">  limit: 100</span></pre></td></tr></table></figure>
<p>特别需要注意的是，search前面不能有空格，否则会报错。</p>
</li>
<li><p>Next 主题配置文件如下:</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local_search:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  enable: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">  trigger: auto</span></pre></td></tr><tr><td class="code"><pre><span class="line">  top_n_per_article: 1</span></pre></td></tr><tr><td class="code"><pre><span class="line">  unescape: false</span></pre></td></tr></table></figure>
<h4 id="配置文章加密功能"><a href="#配置文章加密功能" class="headerlink" title="配置文章加密功能"></a>配置文章加密功能</h4></li>
<li><p>安装插件：</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span></pre></td></tr></table></figure>
</li>
<li><p>Hexo 站点配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">encrypt:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  enable: true</span></pre></td></tr><tr><td class="code"><pre><span class="line">  abstract: 这是一篇加密文章，内容可能涉及个人情感、家庭交流或者其他不适宜公开的内容。</span></pre></td></tr><tr><td class="code"><pre><span class="line">  message: 请输入密码，查看文章。</span></pre></td></tr></table></figure>
</li>
<li><p>在需要加密文章的 md 文件头部加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="code"><pre><span class="line">title: 每周和女儿交流的提纲（2019.12.14）</span></pre></td></tr><tr><td class="code"><pre><span class="line">date: 2019-12-08 13:29:56</span></pre></td></tr><tr><td class="code"><pre><span class="line">tags: [&#39;女儿&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">categories: [&#39;家庭&#39;]</span></pre></td></tr><tr><td class="code"><pre><span class="line">password: 设置的密码</span></pre></td></tr><tr><td class="code"><pre><span class="line">abstract: </span></pre></td></tr><tr><td class="code"><pre><span class="line">---</span></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="形式上的优化-1"><a href="#形式上的优化-1" class="headerlink" title="形式上的优化"></a>形式上的优化</h3><h3 id="具体功能的配置"><a href="#具体功能的配置" class="headerlink" title="具体功能的配置"></a>具体功能的配置</h3>]]></content>
      <categories>
        <category>应用程序</category>
      </categories>
      <tags>
        <tag>云服务</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>每周和女儿交流的提纲（2019.12.21）</title>
    <url>/2019/12/16/family-daughterweekly-002-00012/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码，查看文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="7600b086f77cf864f27a4a397fbf68b574c8eff649058a2bada955da5df2afb8">8cbe5682761c1c4407aea697ce28d69c04c92129135d6781fc15f262611035a0b77a4f2cc3243213c04baf13b0b741c02767cb5387d38e84149a0d5accfeadcfa8d772d9c1d7a50037be7ad3caa66c91f27d21ba8152213f326595acc89ecd1f18f5429ae70ca8759a1397c001e7b9a4d5f84c364f84e7893918a48bcae2d1c4b6b066f51279115b88581bab6e2efdb1c4d4263d2512991ca5eccd56e4ce25063beafdc410c7a74f81245c802208ed2a39fcdae2c9a4f433526b977e240e2cdecbc9a731dfafc33c0a1acf0809cd82c6e427c5b04fb013394b87a0dd88186337cf329cbd7496764ce437f1de993a4db3fe77cedca0b4a7347e64cc806b64a8d8f67134fbceaac2bed432abf2b22abe7154b7162e26de0970d81e7f5fd5f0adc25bc1be4096b301ea41438aa05b9acbd445773b0527b4ebe13fc612c3c8e0718dd34950eac6aebdebe6496ea4be184dd7ed1335e4a3fcd832527cbc19c9d4fbc855c41297ff168aad440f935ec5fcce9a9d9e11e59b8f7b36b1304b250605a1345567a92f86612d89b6d6401de7e079845fac9472ad71de6be29fd1e3aa4bd40083acbd6f50efae76a814b6a1f67d23eeb6290b57f729fa83cad47b3dd62995d2ddeadb7c33871d3c50ebcd53edbbf17e0adcddf4458ab4f9cfd52ce81b3b482f</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>家庭</category>
      </categories>
      <tags>
        <tag>女儿</tag>
      </tags>
  </entry>
  <entry>
    <title>如何建立一个类似这样的网站（二）</title>
    <url>/2019/12/15/web-howtobuildthisblog02-00003/</url>
    <content><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>这一部分，我们的主要目标如下：</p>
<ul>
<li>安装 Node.js、Hexo 和 Next 主题。这样我们就拥有了一个阶段性成果。</li>
<li>配置 Next 的重点参数。</li>
</ul>
<a id="more"></a>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul>
<li><a href="https://www.jianshu.com/p/d95cff938277" target="_blank" rel="noopener">1. NexT主题配置</a></li>
<li><a href="https://blog.csdn.net/science_Lee/article/details/84633237" target="_blank" rel="noopener">2. Hexo语言不生效问题</a></li>
<li><a href="https://tding.top/archives/42c38b10" target="_blank" rel="noopener">3. Hexo-NexT (v7.0+) 主题配置</a></li>
</ul>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="重点步骤"><a href="#重点步骤" class="headerlink" title="重点步骤"></a>重点步骤</h3><ol>
<li>安装Node.js</li>
<li>利用 npm 安装 Hexo</li>
<li>安装 Next 主题</li>
</ol>
<h3 id="配置-Hexo-和-Next"><a href="#配置-Hexo-和-Next" class="headerlink" title="配置 Hexo 和 Next"></a>配置 Hexo 和 Next</h3><ol>
<li>更改 Hexo 的默认主题。我不喜欢 Hexo 自带的主题，选择了现在国内比较流行的 Next 主题，版本是 Next 7.6.0。这个版本配置文件有一些更改，但是大部分前面提供的资源大部分还是可以用在这个版本上。</li>
<li>可以直接从 Github 上安装 Next 7.6.0。安装命令如下：<code>git clone --branch v6.0.0 https://github.com/theme-next/hexo-theme-next themes/next</code>。指令要在主目录下键入。</li>
<li>修改博客主目录下的 <code>_config.yml</code> 文件内容。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">language: zh-Hans</span></pre></td></tr><tr><td class="code"><pre><span class="line">timezone: Asia&#x2F;Shanghai</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">url: http:&#x2F;&#x2F;tohnee123.github.io</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">theme: next</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line">deploy:</span></pre></td></tr><tr><td class="code"><pre><span class="line">  type: &#39;git&#39;</span></pre></td></tr><tr><td class="code"><pre><span class="line">  repo: git@github.com:tohnee123&#x2F;tohnee123.github.io.git</span></pre></td></tr><tr><td class="code"><pre><span class="line">  branch: master</span></pre></td></tr></table></figure></li>
<li>将 <code>themes/next/languages</code> 目录下的<code>zh-CN.yml</code> 更名为 <code>zh-Hans.yml</code></li>
<li>更改 Next 的主题的基本配置<br> 另一个需要配置 Next 目录下的 <code>_config.yml</code>。我个人比较喜欢 Gemini 风格</li>
<li>增加标签和类别页面。默认情况下这两个是没有页面链接的，所以需要按照资源3的建议增加。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo new page tags</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑tags/index.md</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">title: 标签</span></pre></td></tr><tr><td class="code"><pre><span class="line">date: 2019-06-29 11:35:42 <span class="comment">#时间随意</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span> <span class="comment">#类型一定要为tags</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">comments: <span class="literal">false</span> <span class="comment">#提示找个页面不需要评论,后续评论插件那里会详细介绍</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># hexo new page categories</span></span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑categories/index.md</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="code"><pre><span class="line">title: 文章分类</span></pre></td></tr><tr><td class="code"><pre><span class="line">date: 2018-10-15 00:03:57</span></pre></td></tr><tr><td class="code"><pre><span class="line"><span class="built_in">type</span>: <span class="string">"categories"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">comments: <span class="literal">false</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">---</span></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="关注的特别问题"><a href="#关注的特别问题" class="headerlink" title="关注的特别问题"></a>关注的特别问题</h3><ul>
<li>安装Node.js。我安装的时候，是从 node.js 网站上直接下载 OSX 版本的二进制文件直接安装的。在网上还有另外两种办法，一种是通过 homebrew，一种是通过 crul，这两种办法我没有试过，也不知道通过多种渠道安装不同版本的 node.js 会有什么后果。</li>
<li>目录结构，安装完 Hexo 后，会在安装目录下有若干子目录或者文件，比较重要的有：<ul>
<li>_config.yml：Hexo 的整体配置，比如语言，采用的主题、git 的仓库等内容。</li>
<li><code>themes</code>：可以安装各种主题。</li>
<li>主目录下的 <code>source/_posts</code>：我们准备发布到网络上的各种 Markdown 文章。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>应用程序</category>
      </categories>
      <tags>
        <tag>云服务</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何建立一个类似这样的网站（一）</title>
    <url>/2019/12/10/web-howtobuildthisblog01-00002/</url>
    <content><![CDATA[<h2 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h2><p>很多年以前，我就想建立一个类似这样的博客网站。大致有如下的要求：</p>
<ul>
<li>管理方便，能够让人从 Internet 访问，最好对手机的支持友好。</li>
<li>费用低廉，我愿意付一定的费用来满足我这个小小的心愿。</li>
<li>内容迁移容易，因为这些内容再糟糕，也是自己一个个字码起来的，如果要主机不得不搬家的话，内容也比较容易迁移。我最希望是可以在本地进行内容的编写，然后上传到网站上。这个以前大部分博客网站支持的都不好，都要在网站上进行内容的编辑。</li>
<li>界面美观，不用花哨，但是要显得专业。之前新浪这些博客最大的问题是过于花哨，太没有美感。</li>
<li>要能够方便的支持丰富的文本格式，最好可以支持数学公式和代码引入。</li>
<li>最好可以支持留言板功能，方便讨论问题。</li>
</ul>
<p>回想一下，以前要找到这样一个博客网站，实在是不太容易。直到 Github + Hexo + Markdown + 云服务的出现，实现了上面所有的想法，而且还支持文章目录跳转的功能。而这些功能还都是免费的。真是太棒了！</p>
<a id="more"></a>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>当我搭建这个博客网站的时候，相关的知识我大约知道如下内容：</p>
<ul>
<li>有一个自己的 email 地址。</li>
<li>知道 Github 是一个代码共享库，自己在电脑上安装了 Github，但是具体的安装过程和指令早已经不记得了。自己曾经在 Github 上建立过库，但是几乎没有使用过。</li>
<li>Node.js 听说过，只知道名字，从来不知道是干什么用的。从来不知道 npm 是干什么用的。但是我在使用 Linux 的时候，用过 yum 安装过软件包，但是也没太搞明白背后的原理，基本上是按照网上的指令在敲。</li>
<li>Hexo 从来没有听说过。</li>
<li>ssh 用过，也是敲指令的水平。背后的机理只是感觉好像和公、私钥相关，其他细节一概不知。</li>
<li>会用 Bilibili 看视频。</li>
</ul>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>包括我在内，很多人在学习一个新东西的时候，最怕别人给了一大堆资料，然后我们开始依葫芦画瓢。做到一半的时候发现面对的情况和资料中的内容对不上号了，没人告诉我该怎么做下去，然后开始网上查资料。先是用百度，后是用 Bing，摸索、困惑、愤怒，最后放弃。所以我打算把这个任务分成几个不同的步骤，既方便自己的理解和记忆，也希望可以帮助其他人。这个也是我之后其他博客内容写作的主要思路。整个网站的实现包括以下几个步骤：</p>
<ul>
<li>建议一个属于自己的 Github 账号，并在 Github 上建立一个特殊的库。在自己的电脑上配置一些关于 git 的参数。</li>
<li>安装 Node.js、Hexo 和 Next 主题。这样我们就拥有了一个阶段性成果。</li>
<li>根据自己的需要，配置 Next 主题的基本内容</li>
<li>根据我们的需求配置一些其他的高阶属性。比如进行在主页上进行缩略显示、增加搜索功能和支持留言板等等。</li>
<li>如何更改主题，如何在多个网站上同步内容</li>
</ul>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>网络上有大把使用 Github 和 Hexo 设置一个博客站点的介绍，我这里就不打算再花时间重新再写一遍。所以关于大致的安装步骤，请点击以下的链接。这些链接都是我在设置这个站点的时候使用的，或者后来看过的。我觉得我可以理解的话，大家比我聪明，一定也可以理解的。我也会尽量说明说明这些资料大家要特别注意的地方。</p>
<ul>
<li><a href="https://blog.csdn.net/The_lastest/article/details/70001156" target="_blank" rel="noopener">1. 注册Github账号</a></li>
<li><a href="https://www.ezlippi.com/blog/2015/03/github-pages-blog.html" target="_blank" rel="noopener">2. 利用github-pages建立个人博客</a><br>  这个博客的内容还是比较完整的，但是从建立博客网站的目的来说，有部分内容在开始的时候可以不用看，这样我们可以快速的完成建立博客的目标。另外在建立仓库的部分，有一个重点是现在 github 要求的，这个资源没有提及，需要我们特别注意。</li>
<li><a href="https://michael728.github.io/2019/05/19/hexo-blog-full-note/" target="_blank" rel="noopener">利用 Hexo + Github Pages 搭建博客并优化 Next 主题教程</a><br>  这个网站之前我没有看到过，人家2015年就建站了。发现想要做的事情和我一样，但是比我做的更优秀，是我努力的标杆。放在这里一边学习，一边参考。</li>
</ul>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="重点步骤"><a href="#重点步骤" class="headerlink" title="重点步骤"></a>重点步骤</h3><ol>
<li>利用自己的 email 地址，在 github 申请开通一个免费的账号。这个在资源1上有足够的描述信息，按照它的步骤完成就可以了。</li>
<li>进行本机的参数配置，包括 git 和 ssh。</li>
<li>添加 ssh 公钥到 github 中。</li>
<li>添加一个 github 仓库。</li>
</ol>
<h3 id="关注的内容"><a href="#关注的内容" class="headerlink" title="关注的内容"></a>关注的内容</h3><p>为了快速建立博客网站，只需要关注<a href="#资源">1号资源、2号资源的第1部分，第3部分、4.1和4.2</a>。</p>
<h3 id="关注的特别问题"><a href="#关注的特别问题" class="headerlink" title="关注的特别问题"></a>关注的特别问题</h3><ul>
<li>在本机上安装 git。相关的安装过程，可以根据资源2中的内容，我之后在学习 git 的时候会再说明。</li>
<li>git 安装完成后要在命令行进行配置。指令如下：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span>   //这个 email 地址与申请 git 账号时的一样</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git config --global user.name    //检查配置</span></pre></td></tr><tr><td class="code"><pre><span class="line">$ git config --global user.email   //检查配置</span></pre></td></tr></table></figure></li>
<li>在本机产生 ssh 密钥。由于我们的博客是放在外网上，一般在上传资料的时候都需要输入用户名和密码。但是由于资料更新频繁，每次输入这些用户名和密码会觉得非常麻烦，所以我们就可以使用 ssh 验证的办法。大致原理是在本机产生一对密钥（公钥和私钥），将公钥上传到网站上，私钥自己保留。这样每次上传的时候就可以省略了输入密码的麻烦。但是一定要注意保护好自己的私钥。如果私钥在设置时没有密码保护的话，私钥一旦泄露，别人也可以完全控制你的网站。另外，也需要注意要周期性的更换自己的公、私钥对。指令如下：  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span></span></pre></td></tr><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span></pre></td></tr><tr><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</span></pre></td></tr></table></figure>
  然后系统会要求你输入加密串（passphrase)，这个加密串是会让你每次使用该私钥的时候输入密码。因为我现在还在学习这个系统的使用，所以我没有设置。从安全的角度，最好在日后实际使用的时候，设置密钥保护，防止私钥遗失。  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):&lt;输入加密串&gt;</span></pre></td></tr><tr><td class="code"><pre><span class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</span></pre></td></tr></table></figure>
  在这步操作中还会有一个问题，就是系统原来有私钥怎么办？在资源2中，他把这个私钥移除。这不是一个好的解决方案，以后在 ssh 的学习中我会学习该怎么办。现在先麻烦一些，按照网络资源的办法操作。</li>
<li>在 github 中添加一个仓库有一个关键的设置，就是仓库名必须是 userlonginname.github.io。我之前在设置的时候，没有注意 userloginname 的要求，结果花了很多时间。在资源 2 的描述中，这个关键点是不清晰的。</li>
</ul>
<p>到此为止，github 的设置已经基本完成了，也就是我们为自己的博客站点找到了一个家，但是所有的基本设置才刚刚完成一半，剩下的路更艰辛。</p>
<p>欲知后事如何，且听下回分说。</p>
]]></content>
      <tags>
        <tag>云服务</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>每周和女儿交流的提纲（2019.12.14）</title>
    <url>/2019/12/08/family-daugtherweekly-001-00011/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码，查看文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="9286e597dea3538a49824e0ea2997d836ea4a0b4d5106728c6245461c364d546"></script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>家庭</category>
      </categories>
      <tags>
        <tag>女儿</tag>
      </tags>
  </entry>
  <entry>
    <title>web_css_01_00015</title>
    <url>/2019/12/07/web-css-01-00015/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>web_html_01_00014</title>
    <url>/2019/12/07/web-html-01-00014/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>我的时间安排</title>
    <url>/2019/12/06/misc-timeschedule-00010/</url>
    <content><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <div class="hbe-input-container">
  <input type="password" id="hbePass" placeholder="" />
    <label for="hbePass">请输入密码，查看文章。</label>
    <div class="bottom-line"></div>
  </div>
  <script id="hbeData" type="hbeData" data-hmacdigest="42e53bb9e459b425bb828cf20eed0ab6347454e4db22d79897cef4f75613a6a0">3954e836ca03f7d63a021096d57924d08bbff83c0dfe1d7c56d971bd8d648b0db17b07610214f358f54045c8c6aaa020018a6cc35ec2bd89b6f7881a5d82499365ad29592367aa3af038153453f9db297bfdcb66b26f1aedf73dc38f13253e49af0ab016ddc5c4f3544397aeeee9e02589210370ac90c879cf3a2b4669102d63f840e82ace5ba5b35ffbb4d62b75abc42c2d283b54d557ef489b9dbe6c9063ca7959c378eaf949a18821856a845de80ecf4e337aa76633f3b246bb72ff1c9938b11cd61b7f50d526f92fe3d6f6d3bbe62f9312cc37b3b4da03f3b42c1e919f53603166dd6b7af8b799fa1fe768284f2686ecadcad492165b81f5e33c44d4c5636723372d13e7d06198a23ac4adcfcefff2d617f5da656336c4e3571e33450579b8624f04e215517681102509bb5e41032eb3b63928fc78ff25f0ac7c348a5c5d642a50fab521fffab7d94e50988ec3818937ab0c3a3ed1051b90a8531c2cd4651c5b1021c9f921a0a3c07e37a181ae3cc36c6a90210b21be36ab71817859bedb213d99476c441749f01b5d08434c8b3781557120e3980693086755c00a794d93d17b26308cd922d58d17a7b0c6fb318b0e3c60a31dbfec0efa374c52c1fa2140e7297172015446a052cd15e2f7102607200f4dcf9e45e793677792e259e3350ddcc27f472bdb7b24280bf53629c612f9d22e83f76250e4f2d450e6e30c7555f4</script>
</div>
<script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>这个博客的一些惯例、约定和更新</title>
    <url>/2019/12/04/misc-blogruleupdates-00006/</url>
    <content><![CDATA[<p>为了更好的使用这个博客作为我学习的工具，有如下的一些惯例和约定。</p>
<a id="more"></a>
<h2 id="有效的标签、类别"><a href="#有效的标签、类别" class="headerlink" title="有效的标签、类别"></a>有效的标签、类别</h2><h3 id="可用的标签"><a href="#可用的标签" class="headerlink" title="可用的标签"></a>可用的标签</h3><ul>
<li>博客，云服务，Github；</li>
<li>Linux，Python，CSS，JavaScript，Hexo，AI；</li>
<li>线性代数，微积分，概率论；</li>
<li>女儿，老婆；</li>
<li>更新，计划；</li>
</ul>
<h3 id="可用的分类"><a href="#可用的分类" class="headerlink" title="可用的分类"></a>可用的分类</h3><ul>
<li>操作系统，服务软件，开发语言，应用程序，基础知识；</li>
<li>家庭，随笔。</li>
</ul>
<h2 id="文章的排版规范"><a href="#文章的排版规范" class="headerlink" title="文章的排版规范"></a>文章的排版规范</h2><h3 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h3><h4 id="全角与半角"><a href="#全角与半角" class="headerlink" title="全角与半角"></a>全角与半角</h4><ul>
<li>如果西文占主要内容，则除引用原文外，采用半角标点符号；</li>
<li>如果中文占主要内容，则除引用原文外，采用全角标点符号。</li>
</ul>
<h4 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h4><ul>
<li>在使用项目符或者顺序列表的并列内容中，前几项结尾以分号结束，最后一项以句号结束（如本文展示）；</li>
<li>各项内部采用逗号或者顿号分句或者分词。</li>
</ul>
<h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><h4 id="段落中相间"><a href="#段落中相间" class="headerlink" title="段落中相间"></a>段落中相间</h4><ul>
<li>中西文（和其他西文半角符号、行内公式）间留一个半角空格；</li>
<li>中文和阿拉伯数字之间留一个半角空格；</li>
<li>中文文字与全角标点符号之间不需要空格。</li>
</ul>
<h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul>
<li>正文内容是列表形式，缩进于临近标题的内部；</li>
<li>正文内容是文字形式，不缩进于临近标题的内部。</li>
</ul>
<h2 id="文章和博客的更新"><a href="#文章和博客的更新" class="headerlink" title="文章和博客的更新"></a>文章和博客的更新</h2><h3 id="更新级别"><a href="#更新级别" class="headerlink" title="更新级别"></a>更新级别</h3><p>因为是我的笔记和随笔，所以会出现部分文章发布之后，会对部分文章进行一些更新。每年的文章和博客功能更新我会分别放在四个季度小节中：“xxxx.01” ~ “xxxx.04”。</p>
<p>由于更新内容有多有少，为了让自己和访问的人，不要浪费宝贵的时间。我对所有文章的更新会进行一个主观上的分级。<br>0级：只是一些文字上的调整。<br>1级：少于 10% 的内容更新。<br>2级：有 10%～30% 的内容更新。</p>
<h2 id="博客的更新内容"><a href="#博客的更新内容" class="headerlink" title="博客的更新内容"></a>博客的更新内容</h2><h3 id="2020-1"><a href="#2020-1" class="headerlink" title="2020.1"></a>2020.1</h3><h3 id="2019-4"><a href="#2019-4" class="headerlink" title="2019.4"></a>2019.4</h3><ol>
<li>增加了我的豆瓣电影功能。目前主要的问题是 OSX 上 Safari 浏览器和手机上的所有浏览器都没有办法显示电影海报的缩略图功能。由于我使用的是 Next 7.6.0 最新版本，网络上的大部分方案似乎都无效，估计要稍晚才能解决。</li>
</ol>
<h2 id="下阶段的计划"><a href="#下阶段的计划" class="headerlink" title="下阶段的计划"></a>下阶段的计划</h2><ul>
<li>[x] 实现部分文章的加密功能</li>
<li>[x] 博客增加我的读书的内容</li>
<li>[ ] 博客增加数学表达式的支持</li>
<li>[ ] 博客增加留言板的功能</li>
<li>[x] 修订本博客的建站指南</li>
<li>[ ] 增加新的 Linux、Javascript、CSS 的内容</li>
<li>[ ] 决定采用哪个留言系统</li>
<li>[ ] </li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>云服务</tag>
        <tag>博客</tag>
        <tag>计划</tag>
        <tag>更新</tag>
      </tags>
  </entry>
  <entry>
    <title>重新出发</title>
    <url>/2019/12/04/misc-howtobuildadocsite-00001/</url>
    <content><![CDATA[<p>对于一个快50岁的人来说，其实学什么东西似乎都显得有点晚。记得30岁那年的春节，我站在武汉的马路上和自己说，要抓紧时间多学习一些东西。可是时间已经流逝了近20年，我自己却没有成长起来。所有人都知道，人和人最大的差别其实不在智商，而在于坚持。可是由于受到自身性格的影响，虽然道理懂，却一直也没有付诸行动。时光流逝，应该是我人生中很大的遗憾。这些年来，我的生活一直很动荡。路是我自己选的，如果我没有选择走这条路，我一定会很遗憾，所以我不后悔我的选择。但是这些年来，总是要顾及生活的需要，心情一直无法沉淀下来，甚至也对自己的梦想没有了追求，成了一个得过且过的人。这几个月一直孤身在外，没有办法照顾家人，也不能尽子女的责任，心中有愧。当我准备完材料，在这三个星期算是有了那么一些时间，再来规划一下我未来生活该怎么走。</p>
<a id="more"></a>
<p>人总是要有一些追求的，目前的状态身体尚可，等待工作，一口饭还能吃的上。对于这个社会的未来，我是悲观的，在这个慢慢走向黑暗的社会里，总是要做一些事情来支持自己继续走下去。于是我又回想起30岁时曾经的追求，重新出发，去寻找自己未完成的梦想。我是喜欢技术的，回顾这几年，从喜欢技术，慢慢喜欢人文，又回到了技术之中，我感觉更加从容。对于未来，我对自己定义为一个技术爱好者，研究这些一个目的是消磨时间，另外也希望可以帮助身边正在成长的新的一代。他们担负着比我们更加沉重的未来。</p>
<p>现在的条件，除了自己的脑袋变笨了，其他的条件比过去都要好。搞不明白的内容，现在可以在百度上搜素，能够解决大部分的问题；文字看不下去，我们可以去 bilibili 上看视频；还是搞不掂，还有各种各样的微信群和培训机构，使得我们足不出户解决大量的技术问题。硬件条件也比以前要好，无论是云服务还是 github，无论是开发工具还是硬件设备。对于学习来说，这个年代是没有外部理由学不好的，剩下就是自己的努力和坚持。</p>
<h2 id="我的学习目标"><a href="#我的学习目标" class="headerlink" title="我的学习目标"></a>我的学习目标</h2><p>我有一个很宏大的学习目标，不知道最后能完成多少。</p>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul>
<li>主要是数学，除了高中数学的内容以外，还需要掌握高等数学（微积分）、线性代数和概率论。</li>
<li>英语，这个简直不想多说。</li>
</ul>
<h3 id="计算机技术"><a href="#计算机技术" class="headerlink" title="计算机技术"></a>计算机技术</h3><p>这一部分内容非常多，根据学习的先后次序，大概有如下的内容。 </p>
<ul>
<li>Markdown。应该是一个基础的写作工具，这个网站的内容都是用 Markdown 完成的。如果有一点点计算机概念的话，半天以内就可以掌握主要内容，开始发挥作用。Markdown 非常好用，最好的特点是，所有的内容都在一个文件中，方便保存；而通过一些服务的支持可以实现非常实用和炫酷的效果。</li>
<li>Hexo 和 Next 模版。准确的说，Hexo 不能称为一门知识，他只是一个博客的框架。但是对于学习来说，我现在需要通过大量的总结和练习（而不是听课）形成自己的理解。而 Hexo 提供了我所梦想的总结工具。这个网站的目的就是一个自己学习的总结，Hexo 和 Next 模版提供了一切，包括支持 Markdown、数学公式、章节显示和格式化代码。</li>
<li>HTML、CSS 和 JavaScript。我自己对 Web 前端的开发不是特别感兴趣，这三样技术形成了 Web 前端开发的基本技术要求。我现在花时间学习的主要原因既是是为了以后爬虫的学习打下一点基础；另外 JavaScript 在后台的开发中，是 Node.js 的开发语言，学习 JavaScript 不吃亏。</li>
<li>Python。搞计算机的人总是要掌握一门语言。这个掌握指的掌握是非常熟练的使用，而不是大概知道怎么写的。根据老师的说法，大概总是要写到20000行有效代码，才能开始说自己懂一门计算机语言。学习 Python 的主要原因，不完全是因为这门语言比其他的计算机语言更优秀，而是使用的场景比较多。无论在系统运维、后台开发、科学计算还是 AI 方面，Python 的表现都比较优秀。而且通过 Jupter 可以实现立即的交互功能，大大提高了我们学习的效率和直觉。所以在时间有限的情况下，python 是个性价比高的选择。</li>
<li>MySQL 和 SQL。SQL 一种数据库查询语言，MySQL 是一个数据库。根据我的需要，我至少需要掌握一门关系型数据库。</li>
<li>Linux。学习计算机技术，不知道 Linux 是无法想象的。我希望能够达到 Linux 运维的要求。</li>
<li>Shell 和正则表达式。在很多时候，使用编程语言去解决问题，有点像是拿大炮打蚊子，所以需要对 Shell 熟练掌握。正则表达式在编程上有大量的应用场景，好好掌握是必须的选择。</li>
<li>数据结构与算法。数据结构和算法是计算机的基础，类似于数学在我们中学教育的地位。这两门课我在大学没有学好，深以为憾。希望现在有机会能够掌握。</li>
<li>计算机方面的应用层基础协议。主要有 http、DNS、SSH 和 VPN 等常见协议的内容。掌握协议一个是开发工作的需要，另外一个懂得协议在网络上还是自己的安全符和便利贴。</li>
<li>CCIE，我曾经两次考过 CCNP，可是都没有一鼓作气完成 CCIE，所以 CCIE 的证书成为了我心中的那棵草。另外有机会上班的话，可能对网络也需要有较深的了解，看时间和缘分吧。</li>
</ul>
<h2 id="基本的配套工具"><a href="#基本的配套工具" class="headerlink" title="基本的配套工具"></a>基本的配套工具</h2><ul>
<li>一台笔记本电脑，我的是一台13‘的 Macbook Pro。Windows 也没有问题，我使用的大部分软件在两个平台上是兼容的。但无论是什么电脑，最后内存都配大一些，用 SSD 的硬盘，时间是有金钱价值的。</li>
<li>一点点钱。因为现在有很多网上现成的云服务，能够很快的帮助我们实现很多功能或者进行实验。条件许可的情况下，试一试这些服务，能给我们带来不一样的学习体验。现在我每年不包括软件，云服务的年开销大概在2000元以下。</li>
<li>需要以下的软件<ul>
<li>Visual Studio Code（免费）, 可以解决大部分后台和程序设计语言的开发。</li>
<li>HBuilderX（免费），一个国产的软件开发工具。这个软件在前端的开发上，我感觉比 VSC（Visual Studio Code）顺手。</li>
<li>Dash（免费），一个 Mac 离线的 API 查找工具，大部分常用的 API都可以下载到 Dash 里面。Windows 平台上有 Zeal 和 Velocity，我自己没有用过，在视频里面看到其他人用过。</li>
<li>Anaconda（免费），Python 的支持集成包。在 Anaconda 上可以直接下载，有2.x和3.x两个版本，建议使用3.x。据说 2.x后年会停止支持。</li>
<li>Node.js（免费），这是一个服务端的开发平台，我现在不会用。但是在发布 Hexo 的时候需要 Node.js 的支持，所以需要安装在自己使用的笔记本电脑上。</li>
</ul>
</li>
<li>需要以下的云服务<ul>
<li>Github（免费）。开始的时候，Github 是一个很好的起步。我的这个学习的总结博客，使用的就是 Github pages 功能。未来自己的代码也可以保存在 Github 上。需要注意的是，在国内 Github 访问比较慢。由于 Github 可以实现博客的大部分功能，如果 Github 上的内容过于负面，也不知道会不会以后无法访问。所以写的东西最好一定要在自己的机器上有一个备份（所以 Markdown 变得更加重要）。</li>
<li>阿里云（开始的时候每年不超过100元）。建议用他们的 OSS 云存储服务。如果省钱的话，可以选择新加坡站点，每个月有5G的存储和流量免费，访问速度也还行，起步阶段够用。</li>
<li>七牛云或者 sm.ms（有一定的免费容量）。由于 Markdown 中不能直接插入图片，所有在 Markdown 中显示的图片都需要放在网络上，通过链接的形式展示，需要通过图床服务的支持。我没有放在阿里云 OSS 上的主要原因是，像 sm.ms 这样的图床服务提供图片预览和代码粘贴的功能，我现在还没有能力写出自己的代码来，所以就暂时寄居别家了。</li>
<li>LeanCloud，号称为产品开发提供强有力的后端支持。我还没有考虑好哪些功能寄居在他们家。</li>
</ul>
</li>
</ul>
<h2 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h2><p>对于我来说，现在虽然时间比较充裕，但是记忆力确实差了许多。很多东西听很快过就忘记了，所以就想通过这个博客，慢慢总结，形成自己的知识记忆。我目前注意精力分配如下：</p>
<ul>
<li>基础知识：线性代数的巩固。</li>
<li>电脑技术方面：Python、Web 前端（HTML、CSS 和 JavaScript）、Linux 的使用三个方面。另外，也通过这个博客，把 Hexo、Github 和 Markdown 这些知识进行总结和掌握。</li>
<li>英语：真是不好意思说。<br>这个博客的主要目的是为了加深我对知识的理解和记忆，更像是我个人的笔记本。所以很多内容是我我个人知识的汇总，也会有很多其他网站的引用和重复。如果有哪些网站的拥有者觉得我引用他们的内容不合适，也请通过 email 告知。另外我也会借助其他的网络服务，在未来提供留言板功能，欢迎大家共同学习，一起进步。</li>
</ul>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>云服务</tag>
      </tags>
  </entry>
</search>
