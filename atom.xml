<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>不积硅步&lt;br&gt;无以至千里</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tohnee123.github.io/"/>
  <updated>2019-12-13T01:39:55.454Z</updated>
  <id>http://tohnee123.github.io/</id>
  
  <author>
    <name>James Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 学习笔记（三）</title>
    <link href="http://tohnee123.github.io/2020/03/02/languages-python-03-00020/"/>
    <id>http://tohnee123.github.io/2020/03/02/languages-python-03-00020/</id>
    <published>2020-03-02T09:22:46.000Z</published>
    <updated>2019-12-13T01:39:55.454Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="开发语言" scheme="http://tohnee123.github.io/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://tohnee123.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>http 协议（一）</title>
    <link href="http://tohnee123.github.io/2020/03/01/web-http01-00021/"/>
    <id>http://tohnee123.github.io/2020/03/01/web-http01-00021/</id>
    <published>2020-03-02T02:44:51.000Z</published>
    <updated>2019-12-13T16:38:37.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><h3 id="分层协议"><a href="#分层协议" class="headerlink" title="分层协议"></a>分层协议</h3><ol><li>物理层、数据链路层、网络层、传输层、应用层</li></ol><h3 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h3><h4 id="开发者"><a href="#开发者" class="headerlink" title="开发者"></a>开发者</h4><ul><li>Roy Thomas Fielding：REST 架构的设计者</li></ul><h4 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h4><ul><li>GET / HTTP/1.1 HOST developer.mozilla.org</li></ul><h4 id="协议设计考虑"><a href="#协议设计考虑" class="headerlink" title="协议设计考虑"></a>协议设计考虑</h4><ul><li>performance（性能）</li><li>scalability（可伸缩性）</li><li>simpliciry（简单性）</li><li>visiable（可见性）</li><li>portabiliry（可移植性）</li><li>reliability（可靠性）</li><li>modifiability（可修改性）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;协议&quot;&gt;&lt;a href=&quot;#协议&quot; class=&quot;headerlink&quot; title=&quot;协议&quot;&gt;&lt;/a&gt;协议&lt;/h2&gt;&lt;h3 id=&quot;分层协议&quot;&gt;&lt;a href=&quot;#分层协议&quot; class=&quot;headerlink&quot; title=&quot;分层协议&quot;&gt;&lt;/a&gt;分层协议&lt;/h
      
    
    </summary>
    
    
    
      <category term="http" scheme="http://tohnee123.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Python 学习笔记（二）</title>
    <link href="http://tohnee123.github.io/2020/02/28/languages-python-02-00019/"/>
    <id>http://tohnee123.github.io/2020/02/28/languages-python-02-00019/</id>
    <published>2020-02-28T05:37:41.000Z</published>
    <updated>2019-12-13T01:41:41.336Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python 学习笔记（一）</title>
    <link href="http://tohnee123.github.io/2020/02/11/languages-python-01-00018/"/>
    <id>http://tohnee123.github.io/2020/02/11/languages-python-01-00018/</id>
    <published>2020-02-11T05:37:32.000Z</published>
    <updated>2019-12-12T17:05:47.561Z</updated>
    
    <content type="html"><![CDATA[<h2 id="计算机概述"><a href="#计算机概述" class="headerlink" title="计算机概述"></a>计算机概述</h2><h3 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h3><ul><li>总结、随堂练习、基础知识习题、进阶知识习题</li></ul><a id="more"></a><ul><li>推荐书籍<ul><li>Python Cookbook</li><li>Learn Python the Hard Way</li><li>Google’s Python class</li><li>简明 Python 教程</li><li>Monty Python’s Flying Circus</li></ul></li><li>Python 哲学<ul><li>import this;</li></ul></li><li><a href="https://pythonclock.org" target="_blank" rel="noopener">Python 2.x 倒计时</a></li><li>Pyenv<ul><li>Python 多版本的管理工具，管理 Python 解释器；管理 Python 版本；管理 Python 的虚拟环境</li><li><a href="https://github.com/pyenv/pyenv" target="_blank" rel="noopener">Pyenv 开发</a></li></ul></li><li>冯诺伊曼体系<ul><li>输入设备、输出设备、存储器、运算器（算数运算/逻辑运算）、控制器（控制数据在总线上传输）。硬盘是 IO 设备；<ul><li>L1：单核独享，速度和 CPU 抑制</li><li>L2</li><li>L3：多核共享</li></ul></li></ul></li><li>语言类型<ul><li>本地编译：C，C++；</li><li>解释语言：被解释器编译成中间代码，在虚拟机上运行。先编译，再解释执行；</li></ul></li><li>高级语言的发展<ul><li>非结构化语言。有 goto；</li><li>结构化语言；</li><li>面向对象语言；</li><li>函数式语言；</li></ul></li><li>程序<ul><li>算法 + 数据结构 = 程序</li><li>难点 1：无法把数据设计转换为数据结构，无法把处理方法转变为算法</li><li>难点 2：无法用设计范式（结构化/对象）来进行程序设计</li></ul></li></ul><h2 id="Python-基础语法"><a href="#Python-基础语法" class="headerlink" title="Python 基础语法"></a>Python 基础语法</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>一切皆对象<h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><h5 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h5></li><li>不区分 long 和 int</li><li>进制 0x（十六进制），0o（八进制），0b（二进制）</li><li>bool: True，False<h5 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h5><h5 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h5><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4></li><li>使用单双号进行字符串定义；</li><li>使用单双三引号进行跨行字符串的定义；</li><li>在字符串前加上<code>r</code>或者<code>R</code>，停止字符串转义；</li><li>换行采用<code>\</code>，但是如果在各种括号内，跨行不需要<code>\</code>；</li></ul><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><ul><li>标识符区分大小写；</li><li>标识符可以包括字母、数字和下划线；</li><li>标识符只能用字母和下划线开头；</li><li>Python 中最好不要随便用下划线开头；</li><li>不要用中文作为变量名。</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><ol><li><code>+, -, *, /, %, **, //</code>，其中<code>**</code>为乘方，<code>//</code>为整除；</li></ol><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><ol><li><code>&amp;, |, ~, ^, &lt;&lt;, &gt;&gt;</code>：针对 2 进制；</li><li>32//4 = 32 &gt;&gt; 2；</li></ol><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ol><li><code>==, !=, &gt;, &lt;, &gt;=, &lt;=</code></li></ol><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ol><li>and、or 和 not</li><li>逻辑运算符是短路运算符</li></ol><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ol><li>x = y = z = 0</li><li><code>+=, -=, *=, /=, %=</code></li></ol><h4 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h4><ol><li><code>in, not in</code></li></ol><h4 id="身份运算符"><a href="#身份运算符" class="headerlink" title="身份运算符"></a>身份运算符</h4><ol><li><code>is, not is</code></li></ol><h4 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h4><ol><li>算数运算符，位运算符，比较运算符，身份运算符，成员运算符，逻辑运算符</li></ol><h4 id="原码，反码，补码和负数"><a href="#原码，反码，补码和负数" class="headerlink" title="原码，反码，补码和负数"></a>原码，反码，补码和负数</h4><pre><code>* 原码：最高位表示`+/-`；* 反码：正数所有位取反，负数符号位不变，其余位取反；* 补码：正数的补码是其本身，负数的补码是其反码 +1（这个 +1 是不考虑符号位的码位 +1）；* 在计算机中，正数用原码存储，负数用补码存储；* 负数的补码表示转成原码是通过将这个补码表示再补一次后就是原码；* 在计算机中，只有加法器，没有减法器，减法是用加法器操作的；* ~12 等于 -13；* 12 的原码：0b1100；* 取反操作结果：值加 1 取相反数</code></pre><h3 id="程序控制"><a href="#程序控制" class="headerlink" title="程序控制"></a>程序控制</h3><h4 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h4><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只有 if</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 表达式:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">语句块；</span></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 表达式:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:// <span class="keyword">else</span> 仅在正常退出循环时才会执行</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">语句块;</span></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> iteratable:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:// <span class="keyword">else</span> 仅在正常退出循环时才会执行</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">语句块;</span></pre></td></tr></table></figure><ul><li>continue 语句会中断当前循环，进行下一次循环；</li><li>break 语句会终止当前循环；</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><code>#</code>之后的为注释</li><li>Python 是动态的强类型语言，不需要事先声明类型，随时可以赋值为其他类型。不同类型之间操作必须强制转换（不像 Javascript 有隐式类型转换）</li></ul><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>给定一个不超过 5 位正正数，判断有几位，依次打印各位数字。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">nInput = input(<span class="string">"请输入一个不超过 5 位的正整数："</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">nInput = int(nInput)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> nInput &lt; <span class="number">0</span> <span class="keyword">or</span> nInput &gt; <span class="number">99999</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"输入的数字位数不对"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> nInput // <span class="number">10</span> == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"你输入的数字是 1 位数。"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"你输入的各位数字分别为："</span> + str(nInput))</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> nInput // <span class="number">100</span> == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"你输入的数字是 2 位数。"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">nOutput = nInput % <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">nInput = nInput // <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"你输入的各位数字分别为："</span> + str(nOutput) + <span class="string">", "</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> nInput // <span class="number">1000</span> == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"你输入的数字是 3 位数。"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">nOutput = nInput % <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">nInput = nInput // <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"你输入的各位数字分别为："</span> + str(nOutput) + <span class="string">", "</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">elif</span> nInput // <span class="number">10000</span> == <span class="number">0</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"你输入的数字是 4 位数。"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">nOutput = nInput % <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">nInput = nInput // <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"你输入的各位数字分别为："</span> + str(nOutput) + <span class="string">", "</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"你输入的数字是 5 位数。"</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">nOutput = nInput % <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">nInput = nInput // <span class="number">10</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">print(<span class="string">"你输入的各位数字分别为："</span> + str(nOutput) + <span class="string">", "</span>)</span></pre></td></tr></table></figure></p><h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p><code>python</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;计算机概述&quot;&gt;&lt;a href=&quot;#计算机概述&quot; class=&quot;headerlink&quot; title=&quot;计算机概述&quot;&gt;&lt;/a&gt;计算机概述&lt;/h2&gt;&lt;h3 id=&quot;学习方法&quot;&gt;&lt;a href=&quot;#学习方法&quot; class=&quot;headerlink&quot; title=&quot;学习方法&quot;&gt;&lt;/a&gt;学习方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;总结、随堂练习、基础知识习题、进阶知识习题&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="开发语言" scheme="http://tohnee123.github.io/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://tohnee123.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>CSS 学习笔记（一）</title>
    <link href="http://tohnee123.github.io/2020/02/10/web-css-01-00015/"/>
    <id>http://tohnee123.github.io/2020/02/10/web-css-01-00015/</id>
    <published>2020-02-10T09:22:59.000Z</published>
    <updated>2019-12-13T15:25:44.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="tilt"><a href="#tilt" class="headerlink" title="tilt"></a>tilt</h4><ul><li>Firefox 下的 tilt 可以看到 css 的结构层次；<a id="more"></a></li></ul><h2 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h2><h3 id="內联-CSS"><a href="#內联-CSS" class="headerlink" title="內联 CSS"></a>內联 CSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"color:red; font-size:12px;"</span>&gt;</span>一段文字<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr></table></figure><ul><li>內联样式只对当前标签起作用；</li><li>內联样式不方便重复使用。</li></ul><h3 id="内部-CSS"><a href="#内部-CSS" class="headerlink" title="内部 CSS"></a>内部 CSS</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">// CSS 选择器</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="css"><span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:red; <span class="attribute">font-size</span>:<span class="number">12px</span>&#125;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr></table></figure><ul><li>方便修改和管理；</li><li>不方便多个页面共享，也不能充分应用浏览器的缓存机制。</li></ul><h3 id="外联-CSS"><a href="#外联-CSS" class="headerlink" title="外联 CSS"></a>外联 CSS</h3><ul><li>将 css 描述放入外部文件（*.css）中；<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">p&#123;color:red; font-size:12px&#125;</span></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"文件名.css"</span> /&gt;</span> </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr></table></figure></li><li>将 css 统一放入外部样式表，使前端结构和形式的完全分离。实现样式表在不同的页面中使用；</li><li>可以加快访问速度（通过浏览器的文件缓存机制），提高用户体验。</li></ul><h3 id="块元素和內联元素"><a href="#块元素和內联元素" class="headerlink" title="块元素和內联元素"></a>块元素和內联元素</h3><ul><li>块元素和內联元素也称为块标签和內联标签，两者等价；<ul><li>块标签：<code>&lt;div&gt;, &lt;p&gt;</code></li><li>內联标签：<code>&lt;a&gt;, &lt;span&gt;</code></li></ul></li><li>HTML5 已经不用块元素和內联元素的概念，但是用块元素和內联元素比较好理解；</li><li>块元素主要用来做页面中的布局，內联元素主要用于选中文本，方便设置样式；</li><li>一般情况下用块元素包含內联元素，不太会用內联元素包含块元素；</li><li>a 标签可以包含任意的元素，除了 a 标签自身；</li><li>div 标签可以包括任意标签；</li><li>p 标签虽然是一个块元素标签，但是不能包括任何块标签；</li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li>通过选择器，我们可以选中页面中的某一部分，从而利用 css 进行格式化；</li><li>标签选择器（元素选择器）：通过标签可以选中页面中的所有指定标签；</li><li>id 选择器：通过元素的 id 属性值来选择唯一的一个元素；</li><li>class 选择器：拥有相同 class 的为一组元素。可以为同一个元素设置多个 class 属性值，多个值之间用空格隔开；</li><li>选择器分组：可以同时选中多个选择器对应的元素；</li><li>交集选择器：同时满足多个条件的选择器（一般不用于 id 选择器）；</li><li>通配选择器：选中所有元素；</li><li>元素之间的关系：<ul><li>父元素：直接包含子元素的元素；</li><li>子元素：直接被父元素包含的元素；</li><li>祖先元素：直接或间接包含后代元素的元素，父元素也是祖先元素；</li><li>后代元素：直接或间接被祖先元素包含的元素，子元素也是后代元素；</li><li>兄弟元素：拥有相同父元素的元素；</li></ul></li><li>后代选择器：<ul><li>选择指定元素的指定后代元素； </li></ul></li><li>子元素选择器：<ul><li>选择指定父元素的指定子元素； <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 标签选择器--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">p&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">color: red;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">font-size: 12px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- id 选择器--&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">#p1&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">font-size: 20px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- class 选择器 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">.c1&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">color: green;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">.c2&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">font-size: 20px;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 选择器分组 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">p, #p1, .c1&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">background-color: yellow;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 交集选择器  --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">span.c3<span class="tag">&lt;<span class="name">多个选择器</span>&gt;</span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">background-color: green;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通配选择器 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line">.*&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">color: green;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 后代元素选择器 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line">div span&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">color: red;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line">#d1 span&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">color: red;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 子元素选择器 --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line">div &gt; span&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">color: red;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>锄禾日当午<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>汗滴禾下土<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c1"</span>&gt;</span>谁知盘中餐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c1 c2"</span>&gt;</span>粒粒皆辛苦<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"c3"</span>&gt;</span>春眠不觉晓<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>处处闻啼鸟<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"c3"</span>&gt;</span>我是span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS&quot;&gt;&lt;a href=&quot;#CSS&quot; class=&quot;headerlink&quot; title=&quot;CSS&quot;&gt;&lt;/a&gt;CSS&lt;/h2&gt;&lt;h3 id=&quot;工具&quot;&gt;&lt;a href=&quot;#工具&quot; class=&quot;headerlink&quot; title=&quot;工具&quot;&gt;&lt;/a&gt;工具&lt;/h3&gt;&lt;h4 id=&quot;tilt&quot;&gt;&lt;a href=&quot;#tilt&quot; class=&quot;headerlink&quot; title=&quot;tilt&quot;&gt;&lt;/a&gt;tilt&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Firefox 下的 tilt 可以看到 css 的结构层次；
    
    </summary>
    
    
      <category term="开发语言" scheme="http://tohnee123.github.io/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="css" scheme="http://tohnee123.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>HTML 5 简介</title>
    <link href="http://tohnee123.github.io/2020/02/02/web-html-01-00014/"/>
    <id>http://tohnee123.github.io/2020/02/02/web-html-01-00014/</id>
    <published>2020-02-02T09:22:46.000Z</published>
    <updated>2019-12-13T01:01:37.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="html-历史"><a href="#html-历史" class="headerlink" title="html 历史"></a>html 历史</h2><ul><li>1993.6: HTML 第一个版本</li><li>1995.11: HTML 2.0</li><li>1997.1: HTML 3.2 （W3C）</li><li>1999.12: HTML 4.01 (W3C)</li><li>2000.12: XHTML 1.0 (W3C)<br>2004 年，W3C 希望过渡结束，但是浏览器厂商不支持 XHTML。到了 2007 年 W3C 发现 XHTML 还是没有太多的进展，W3C 和 WHATWG 最后发布了 HTML 5 发布。</li><li>2014.10: HTML 5 (W3C)</li></ul><a id="more"></a><h2 id="html-语法"><a href="#html-语法" class="headerlink" title="html 语法"></a>html 语法</h2><h3 id="html-语言版本"><a href="#html-语言版本" class="headerlink" title="html 语言版本"></a>html 语言版本</h3><ul><li>编写网页时，一定要将 HTML5 的文档声明写在网页的最上面；<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>// HTML5 的文档声明</span></pre></td></tr></table></figure></li></ul><h3 id="编码格式"><a href="#编码格式" class="headerlink" title="编码格式"></a>编码格式</h3><ul><li>在计算机中保存的任何内容，最终都需要进行二进制编码来保存（编码/解码），编码和解码的规则称为字符集；</li><li>常见字符集：<ul><li>ASCII（7/8 位保存一个字符）</li><li>GBK2312：中文系统的默认编码</li><li>GBK</li><li>ISO-8859-1，解决欧洲的字符问题（8 位）</li><li>UTF-8：支持地球上所有的文字（UTF-8 w/o BOM)</li><li>ANSI：根据系统的设置，采用系统默认的编码格式保存（对于中文系统自动选择 GB2312）</li></ul></li><li>部分编辑器会产生乱码的问题。出现的原因是编码和解码采用的字符集不同；</li><li>在中文系统的浏览器默认是使用 GB2312 进行解码，所以需要指导浏览器使用 UTF-8 进行编码；<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 告知浏览器编码格式  --&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span></pre></td></tr></table></figure></li></ul><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><ul><li>在 html 中，我们不能随意使用 <code>&lt;, &gt;</code>。我们需要使用特殊符号来表示这些字符，这些特殊符号我们称为实体（转义字符串）；</li><li>浏览器看到实体后，会自动转换为对应的字符；</li><li>格式：<code>&amp;xx;</code><ul><li><code>&lt;</code>：&lt;</li><li><code>&gt;</code>：&gt;</li><li>空格：&nbsp;</li><li>版权：&copy;</li></ul></li></ul><h3 id="常见标签"><a href="#常见标签" class="headerlink" title="常见标签"></a>常见标签</h3><h4 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h4><ul><li><code>&lt;h1&gt;&lt;/h1&gt;</code> ~ <code>&lt;h6&gt;&lt;/h6&gt;</code>：重要性依次降低</li><li>由于 html 和 css 的分离，内容的标题标签，我们关心的是语义，而不是显示的形式。显示的形式是可以通过 css 进行修改；</li><li>搜索引擎检索完 title 后，会立即查看 <code>&lt;h1&gt;</code> 标签中的内容。所以 <code>&lt;h1&gt;</code> 的内容会影响页面在搜索引擎中的排名；</li><li>一般页面中只写一个<code>&lt;h1&gt;</code>。</li></ul><h4 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h4><ul><li><code>&lt;p&gt;&lt;/p&gt;</code>用于表示内容中的一个自然段。会默认独占一行，段之间会有间距；</li><li>在 HTML 中，字符间无论有多少个空格和换行，浏览器都当作一个空格来解析；</li></ul><h4 id="换行标签"><a href="#换行标签" class="headerlink" title="换行标签"></a>换行标签</h4><ul><li><code>&lt;br /&gt;</code>，表示换行。</li></ul><h4 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h4><ul><li>实现页面跳转的功能（默认在当前页面打开），可以是相对路径，也可以是完整的地址；<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"链接地址"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">id</span>=<span class="string">"bottom"</span>&gt;</span>我是一个链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">target: 打开位置：</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment">_self: 默认值；</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">_blank: 在新窗口打开链接；</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;iframe name&gt;: 在页面的內联框架中打开新页面；</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment">--&gt;</span></span></pre></td></tr></table></figure></li><li>可以在<code>href=&quot;#&quot;</code>，表示暂时还不确定具体的链接地址，并且回到页面顶部。<code>href=&quot;#bottom&quot;</code>表示去相应的元素（标签的唯一标识，必须以字母开头）；</li><li>可以在<code>href=mailto:email address</code>，设置自动打开计算机的邮件程序，发送邮件，将收件人设置为 href 的邮件地址。</li></ul><h4 id="块元素标签"><a href="#块元素标签" class="headerlink" title="块元素标签"></a>块元素标签</h4><ul><li>div 这个标签没有任何语义，就是一个存粹的块元素，并且不会为它里面的元素设置任何样式；</li><li>div 是一个块元素，无论内容有多少会独占一行；</li><li>块元素之间没有空行，div 主要是对页面元素进行布局的；<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color: red; width: 200px;"</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">我是 div</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></pre></td></tr></table></figure></li></ul><h4 id="內联标签"><a href="#內联标签" class="headerlink" title="內联标签"></a>內联标签</h4><ul><li>span 是一个內联元素（行内元素），指的是只占自身大小的元素；</li><li>如果一行容不下会自动换行；</li><li>span 这个标签也没有任何语义，span 标签是用于专门选择文字，通过 css 来设置样式。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">""</span>&gt;</span>我是一段文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></pre></td></tr></table></figure></li></ul><h4 id="span-标签"><a href="#span-标签" class="headerlink" title="span 标签"></a>span 标签</h4><h4 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h4><ul><li><code>&lt;hr /&gt;</code>，在页面中生成一条水平线。</li></ul><h4 id="加粗标签"><a href="#加粗标签" class="headerlink" title="加粗标签"></a>加粗标签</h4><ul><li><code>&lt;b&gt;&lt;/b&gt;</code>，对标签内内容进行加粗。</li></ul><h4 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h4><ul><li><code>&lt;img src=“图片文件名” /&gt;</code>：引入一个外部图片；</li><li><code>alt</code> 属性可以告诉搜索引擎搜索图片时的关键字；</li><li><code>width</code>和<code>height</code>属性修改图片的宽度和高度，单位都是像素（px）。如果两个属性只设置一个，另外一个也会等比例缩小；</li><li>相对路径的概念；</li><li>图片的格式：gif, jpeg, png；<ul><li>jpeg：图片可以压缩，支持的颜色比较多，但不支持透明，一般用来保存照片；</li><li>GIF：支持的颜色少，支持简单的透明（直线透明），支持动画；</li><li>png：支持的颜色多，支持的复杂的透明，可以用来显示颜色复杂的透明图片；<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"相对目录名/图片文件名"</span> <span class="attr">alt</span>=<span class="string">"在图片不能显示时的描述"</span> /&gt;</span></span></pre></td></tr></table></figure></li></ul></li></ul><h4 id="居中标签"><a href="#居中标签" class="headerlink" title="居中标签"></a>居中标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>居中内容<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span></pre></td></tr></table></figure><h4 id="font（建议以后采用-CSS-进行格式化）"><a href="#font（建议以后采用-CSS-进行格式化）" class="headerlink" title="font（建议以后采用 CSS 进行格式化）"></a>font（建议以后采用 CSS 进行格式化）</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是我的<span class="tag">&lt;<span class="name">font</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">font</span>&gt;</span>网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure><h4 id="meta-标签"><a href="#meta-标签" class="headerlink" title="meta 标签"></a>meta 标签</h4><ul><li>设置网页的元数据，可以设置网页的关键字；<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"html5, javascript, 前端"</span> /&gt;</span></span></pre></td></tr></table></figure></li><li>指定网页的描述<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"这是一个测试网页"</span> /&gt;</span></span></pre></td></tr></table></figure></li><li>搜索引擎会使用<code>keywords</code>和<code>description</code>，但是不会影响网页的排名；</li><li>请求的重定向（n 秒后跳转页面）：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"5;url=http://website address"</span> /&gt;</span></span></pre></td></tr></table></figure></li></ul><h3 id="html-注释"><a href="#html-注释" class="headerlink" title="html 注释"></a>html 注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">这是一段 html 注释</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">--&gt;</span></span></pre></td></tr></table></figure><h3 id="设置标签属性"><a href="#设置标签属性" class="headerlink" title="设置标签属性"></a>设置标签属性</h3><ul><li>通过标签属性，可以设置如何处理标签中的内容。属性是个名值对<code>属性名=&quot;属性值&quot;</code>；</li><li>查询标签的属性，可以通过 w3school 离线手册查询；</li><li>一个标签中可以设置多个标签属性，属性之间用空格隔开；</li><li>属性只能设置在开始标签中。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是我的<span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">font</span>&gt;</span>网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></pre></td></tr></table></figure></li></ul><h3 id="语法规范"><a href="#语法规范" class="headerlink" title="语法规范"></a>语法规范</h3><ul><li>不区分大小写，一般使用小写；</li><li>html 的注释不能嵌套；</li><li>html 的标签必须结构完整，要么成对出现，要么自结束标签；</li><li>html 的标签可以嵌套，但是不能交叉嵌套；</li><li>html 标签的属性必须有值，且值必须加引号（单双引号都可以）。</li></ul><h3 id="內联框架"><a href="#內联框架" class="headerlink" title="內联框架"></a>內联框架</h3><ul><li>使用內联框架可以引入一个外部的页面，使用 iframe 来创建一个內联框架；<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"外部页面的路径"</span> <span class="attr">name</span>=<span class="string">"名字"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></pre></td></tr></table></figure></li><li>在现实开发中不推荐使用內联框架，因为內联框架中的内容不会被搜索引擎所检索；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;html-历史&quot;&gt;&lt;a href=&quot;#html-历史&quot; class=&quot;headerlink&quot; title=&quot;html 历史&quot;&gt;&lt;/a&gt;html 历史&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1993.6: HTML 第一个版本&lt;/li&gt;
&lt;li&gt;1995.11: HTML 2.0&lt;/li&gt;
&lt;li&gt;1997.1: HTML 3.2 （W3C）&lt;/li&gt;
&lt;li&gt;1999.12: HTML 4.01 (W3C)&lt;/li&gt;
&lt;li&gt;2000.12: XHTML 1.0 (W3C)&lt;br&gt;2004 年，W3C 希望过渡结束，但是浏览器厂商不支持 XHTML。到了 2007 年 W3C 发现 XHTML 还是没有太多的进展，W3C 和 WHATWG 最后发布了 HTML 5 发布。&lt;/li&gt;
&lt;li&gt;2014.10: HTML 5 (W3C)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="开发语言" scheme="http://tohnee123.github.io/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="html" scheme="http://tohnee123.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 学习笔记</title>
    <link href="http://tohnee123.github.io/2020/01/30/web-markdown-00013/"/>
    <id>http://tohnee123.github.io/2020/01/30/web-markdown-00013/</id>
    <published>2020-01-30T09:22:14.000Z</published>
    <updated>2019-12-07T22:27:34.836Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript 学习笔记（二）</title>
    <link href="http://tohnee123.github.io/2020/01/25/languages-javascript-02-00016/"/>
    <id>http://tohnee123.github.io/2020/01/25/languages-javascript-02-00016/</id>
    <published>2020-01-25T09:24:42.000Z</published>
    <updated>2019-12-13T12:50:51.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中级概念"><a href="#中级概念" class="headerlink" title="中级概念"></a>中级概念</h2><h3 id="对象编程"><a href="#对象编程" class="headerlink" title="对象编程"></a>对象编程</h3><h4 id="对象的基本概念"><a href="#对象的基本概念" class="headerlink" title="对象的基本概念"></a>对象的基本概念</h4><ul><li>对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。</li><li>对象的种类：<ul><li>内建对象，在 ES 标准中定义的对象。在任何 ES 的实现中都可以使用；</li><li>宿主对象，由 JS 运行环境提供的对象。比如浏览器提供的对象组，DOM 对象模型，BOM 对象模型；</li><li>自定义对象，由开发人员自己创建的对象。</li></ul></li></ul><a id="more"></a><h4 id="对象的属性"><a href="#对象的属性" class="headerlink" title="对象的属性"></a>对象的属性</h4><ul><li>属性名不要求执行标识符的命名规范，但是从规范的角度，尽量按照标识符的规范；</li><li>访问属性名有两种方法，<code>&lt;对象名&gt;.&lt;属性名&gt;</code>和<code>&lt;对象名&gt;[&quot;&lt;属性名&gt;&quot;]</code>。第二种方法比较方便，可以利用变量传递属性名；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">obj.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">obj.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.gender);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">"gender"</span>]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">a = <span class="string">'name'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj[a]);</span></pre></td></tr></table></figure></li><li>对象的属性值可以是任意的数据类型；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>(), obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">obj1.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">obj1.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">obj2.pointer = obj1;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj2.pointer.name);</span></pre></td></tr></table></figure></li></ul><h4 id="对象的方法"><a href="#对象的方法" class="headerlink" title="对象的方法"></a>对象的方法</h4><ul><li>对象的属性值也可以是一个函数，如果一个函数作为一个对象的属性保存，这个属性称为对象的方法，调用这个函数就是调用这个对象的方法；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>(), obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">obj1.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">obj1.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj1.name)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj1.sayName);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">obj1.sayName();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">name: <span class="string">"孙悟空"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">age: <span class="number">518</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj2.name);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">obj2.sayName();</span></pre></td></tr></table></figure></li></ul><h4 id="枚举对象属性"><a href="#枚举对象属性" class="headerlink" title="枚举对象属性"></a>枚举对象属性</h4><ul><li>使用 for…in 语句，注意的是枚举语句返回的是字符串；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj2 = &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">name: <span class="string">"孙悟空"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">age: <span class="number">518</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">address:<span class="string">"花果山"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">gender:<span class="string">"男"</span>,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">sayName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj2.name);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> a <span class="keyword">in</span> obj2) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj[a]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul><h4 id="对象的语法"><a href="#对象的语法" class="headerlink" title="对象的语法"></a>对象的语法</h4><ul><li>创建对象（两种方式）：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();<span class="comment">// new 关键字调用对象的构造函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span>:<span class="string">"猪八戒"</span>, <span class="attr">age</span>:<span class="number">12</span>&#125;;<span class="comment">// 名和值之间用:，名值对间用,，最后一个属性不要加,</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">"age"</span>]);</span></pre></td></tr></table></figure></li><li>向对象添加属性（对象中保存的值）：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">obj.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">obj.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj);</span></pre></td></tr></table></figure></li><li><p>读取对象的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">obj.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">obj.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.gender);</span></pre></td></tr></table></figure><p>读取对象中不存在的属性，不会报错，会返回<code>undefined</code>。</p></li><li><p>删除对象的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">obj.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">obj.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(obj.gender);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span>.obj.gender;</span></pre></td></tr></table></figure></li><li><p>检查对象是否含有指定的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">obj.name = <span class="string">'孙悟空'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">obj.gender = <span class="string">'男'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"sex"</span> <span class="keyword">in</span> obj);<span class="comment">// 返回 false</span></span></pre></td></tr></table></figure></li></ul><h4 id="常见的对象"><a href="#常见的对象" class="headerlink" title="常见的对象"></a>常见的对象</h4><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>函数中可以封装功能（代码块），函数可以在需要的时候被重复调用；</li><li>函数实际上也是一个对象。用 typeof 返回的是<code>function</code>。函数对象拥有对象的一切性质；</li><li>函数可以使用<code>new</code>构造，传入的参数是函数要执行的代码。在构造时，函数的代码不会立即执行，函数的代码会在函数被调用时执行；</li><li>可以在函数的 () 中来指定多个形参，多个形参之间用 , 分隔，声明形参相当于在函数中声明了变量；</li><li>可以在函数调用时指定实参；<ul><li>需要注意解释器不会检查数据类型，所以要注意检查是否会接收到非法的参数；</li><li>同样解析器也不会检查实参的数量，多余的实参不会被赋值；</li><li>如果实参数量少于形参数量，没有对应实参的形参将是<code>undefined</code>；</li><li>被传递的实参可以是任意数据类型。</li></ul></li><li>可以使用 return 设置返回值。return 之后的函数语句不被执行；</li></ul><h4 id="函数语法"><a href="#函数语法" class="headerlink" title="函数语法"></a>函数语法</h4><ul><li><p>函数的定义（三种方法）和执行；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 1：构造函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"console.log('Hello Javascript!')"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">fun();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 2：函数声明，function 函数名([形参1, 形参2, ...])</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"这是我定义的函数"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">fun2();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 3：使用函数表达式来创建一个匿名函数</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun3 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"我是一个匿名函数"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">fun3();</span></pre></td></tr></table></figure></li><li><p>函数传递参数（形参）；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a + b);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">sum(<span class="number">3</span>, <span class="number">5</span>);</span></pre></td></tr></table></figure></li><li><p>立即调用函数，函数定义完后，立即执行；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a + b);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;)(<span class="number">3</span>, <span class="number">4</span>);</span></pre></td></tr></table></figure></li></ul><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><ul><li>直接写在 script 标签中的 JS 代码，都在全局作用域中；</li><li>全局作用域在页面打开时创建，在页面关闭时销毁；</li><li>在全局作用域中有一个全局对象 window，我们可以直接使用。代表浏览器的窗口，由浏览器创建；</li><li>在全局作用域中创建的变量都会作为 window 的属性保存；</li><li>在全局作用域中创建的函数都会作为 window 的方法保存；</li><li>变量声明提前：使用 var 关键字声明的变量，会在所有代码被执行前声明。所以尽量使用 var 声明变量；</li><li>函数声明提前：使用函数声明形式创建的函数，会在所有代码被执行之前就被创建，所以可以在函数声明前调用。使用函数表达式形式创建的函数，不能在函数声明前调用；</li><li>全局作用域内的变量，都可以被全局可访问。</li></ul><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>数组是一个对象，用不同的元素存储一些值，数组使用数字作为索引来操作元素（对象属性）；</li><li>数组的性能比普通对象要好，所以我们经常使用数组来来存储数据；</li><li>数组的索引从 0 开始；</li><li>数组中的元素可以是任意的数据类型；</li></ul><h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><ul><li>声明数组、给数组元素赋值和获得数组元素的值；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 1：构造数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="string">"hello"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 2：构造数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];<span class="comment">// 和 new Array() 一样</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="string">"hello"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 3：使用值创建数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];<span class="comment">// 创建 5 个元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)<span class="comment">// 创建 5 个元素</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>)<span class="comment">// 创造 10 个元素空数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="string">"hello"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">0</span>]);</span></pre></td></tr></table></figure></li></ul><h4 id="数组的属性"><a href="#数组的属性" class="headerlink" title="数组的属性"></a>数组的属性</h4><ul><li>获取数组的长度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法 1：构造数组</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>] = <span class="string">"hello"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">arr[<span class="number">1</span>] = <span class="string">"javascript"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length = arr.length;     <span class="comment">// length 为 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">arr[arr.length] = <span class="string">"The third array element"</span><span class="comment">// 对数组最后一个元素赋值</span></span></pre></td></tr></table></figure></li></ul><h4 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h4><h5 id="push-方法"><a href="#push-方法" class="headerlink" title="push 方法"></a>push 方法</h5><ul><li>该方法可以向数组的末尾添加一个或多个元素，并返回数组的长度；</li><li>将要添加的元素作为方法传递，这些元素将会自动添加到末尾。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.push(<span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);</span></pre></td></tr></table></figure><h5 id="pop-方法"><a href="#pop-方法" class="headerlink" title="pop 方法"></a>pop 方法</h5><ul><li>方法用于删除并返回数组的最后一个元素，并将删除的元素作为返回值返回。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.pop();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);</span></pre></td></tr></table></figure></li></ul><h5 id="unshift-方法"><a href="#unshift-方法" class="headerlink" title="unshift 方法"></a>unshift 方法</h5><ul><li>向数组的开头添加一个或更多元素，并返回新的长度。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.unshift(<span class="string">'abc'</span>, <span class="string">'efg'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);</span></pre></td></tr></table></figure></li></ul><h5 id="shift-方法"><a href="#shift-方法" class="headerlink" title="shift 方法"></a>shift 方法</h5><ul><li>用于把数组的第一个元素从其中删除（剩余元素向前移动），并返回第一个元素的值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.shift();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr);</span></pre></td></tr></table></figure></li></ul><h5 id="slice-方法"><a href="#slice-方法" class="headerlink" title="slice 方法"></a>slice 方法</h5><ul><li>从某个已有的数组返回选定的元素；</li><li>该方法不会改变原数组，而是将截取的数组保存到一个新的数组中；</li><li>包括开始的索引，不包括结束的索引；</li><li>如果开始索引为负值，则表示从数组的末尾开始计数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.slice(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">// 从索引 1 截取到索引 2</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result1 = arr.slice(<span class="number">1</span>, <span class="number">-1</span>);<span class="comment">// 从索引 1 截取到索引倒数第 2 个</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr);</span></pre></td></tr></table></figure></li></ul><h5 id="splice-方法"><a href="#splice-方法" class="headerlink" title="splice 方法"></a>splice 方法</h5><ul><li>删除元素，并向数组添加新元素。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.splice(<span class="number">0</span>, <span class="number">2</span>);<span class="comment">// 从数组索引 0 开始，删除 2 个元素，将被删除的元素作为返回值返回</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result1 = arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">"1"</span>, <span class="string">"2"</span>);<span class="comment">// 从数组索引 1 开始，删除 2 个元素，并从开始索引处添加参数指定的值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result1 = arr.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">"1"</span>, <span class="string">"2"</span>);<span class="comment">// 从数组索引 1 开始，在索引处添加参数指定的值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result1);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr);</span></pre></td></tr></table></figure><h5 id="concat-方法"><a href="#concat-方法" class="headerlink" title="concat 方法"></a>concat 方法</h5></li><li>连接两个或更多的数组，并返回结果，该方法对原数组没有影响。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">result = arr.concat(arr2, arr3, <span class="string">'其他元素'</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);</span></pre></td></tr></table></figure></li></ul><h5 id="join-方法"><a href="#join-方法" class="headerlink" title="join 方法"></a>join 方法</h5><ul><li>把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔，该方法对原数组没有影响。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">result = arr.join();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">result = arr.join(<span class="string">'-'</span>);<span class="comment">// 以 - 为连接符，不指定用 ,</span></span></pre></td></tr></table></figure></li></ul><h5 id="reverse-方法"><a href="#reverse-方法" class="headerlink" title="reverse 方法"></a>reverse 方法</h5><ul><li>颠倒数组中元素的顺序，该方法直接修改原数组。</li></ul><h5 id="sort-方法（未完成）"><a href="#sort-方法（未完成）" class="headerlink" title="sort 方法（未完成）"></a>sort 方法（未完成）</h5><ul><li>对数组的元素进行排序（根据 unicode 排序），该方法直接修改原数组；</li><li>可以自定义排序排序规则，需要在 sort() 中增加一个回调函数；<ul><li>函数需要定义两个形参；</li><li>浏览器将会分别用数组中的两个元素作为实参去调用回调函数；</li><li>使用哪两个元素不确定，但是肯定数组中 a 一定在 b 的前边；</li><li>如果回调值返回大于 0 的数，则元素会交换位置，负值不会交换位置，等于 0，认为两个数值相等；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">3</span>, <span class="number">11</span>, <span class="number">2</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">result = arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> a - b;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure></li></ul></li></ul><h5 id="for-each-方法（未完成）"><a href="#for-each-方法（未完成）" class="headerlink" title="for each 方法（未完成）"></a>for each 方法（未完成）</h5><ul><li>遍历一个数组。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x, arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = arr.shift();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(arr);</span></pre></td></tr></table></figure></li></ul><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h3 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h3><h4 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h4><ul><li>开启/停止计时器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">"计时器名字"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"计时器名字"</span>);</span></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中级概念&quot;&gt;&lt;a href=&quot;#中级概念&quot; class=&quot;headerlink&quot; title=&quot;中级概念&quot;&gt;&lt;/a&gt;中级概念&lt;/h2&gt;&lt;h3 id=&quot;对象编程&quot;&gt;&lt;a href=&quot;#对象编程&quot; class=&quot;headerlink&quot; title=&quot;对象编程&quot;&gt;&lt;/a&gt;对象编程&lt;/h3&gt;&lt;h4 id=&quot;对象的基本概念&quot;&gt;&lt;a href=&quot;#对象的基本概念&quot; class=&quot;headerlink&quot; title=&quot;对象的基本概念&quot;&gt;&lt;/a&gt;对象的基本概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;对象属于一种复合的数据类型，在对象中可以保存多个不同数据类型的属性。&lt;/li&gt;
&lt;li&gt;对象的种类：&lt;ul&gt;
&lt;li&gt;内建对象，在 ES 标准中定义的对象。在任何 ES 的实现中都可以使用；&lt;/li&gt;
&lt;li&gt;宿主对象，由 JS 运行环境提供的对象。比如浏览器提供的对象组，DOM 对象模型，BOM 对象模型；&lt;/li&gt;
&lt;li&gt;自定义对象，由开发人员自己创建的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>JavaScript 学习笔记（一）</title>
    <link href="http://tohnee123.github.io/2020/01/19/languages-javascript-01-00007/"/>
    <id>http://tohnee123.github.io/2020/01/19/languages-javascript-01-00007/</id>
    <published>2020-01-19T08:54:14.000Z</published>
    <updated>2019-12-13T11:58:59.834Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 是一种前端的开发语言，当然发展到现在也被用做后端的开发，比如借助于 Node.js。由于现在大量的前端框架会基于 JavaScript 和 Node.js，所以了解 JavaScript 是非常重要的。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>本笔记基于尚硅谷的《Javascript 基础班》</li></ul><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="常用术语"><a href="#常用术语" class="headerlink" title="常用术语"></a>常用术语</h3><ul><li>Javascript, JS 都指 Javascript</li><li>ES，Javascript 的标准</li></ul><h3 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><ul><li>number、string、boolean、undefined、null</li><li>number：NaN 也是数字值</li></ul><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><ul><li>object</li></ul><h4 id="两种数据类型的区别"><a href="#两种数据类型的区别" class="headerlink" title="两种数据类型的区别"></a>两种数据类型的区别</h4><ul><li>JS 中的变量都是保存在栈内存中（变量名和变量值）。对于基本数据类型的变量，变量值接保存在栈内存中；</li><li>JS 的 Ojbect 变量本体保存在堆内存中，在栈内存保存了变量名和指向该 Object 的内存指针（对象引用）；</li><li>基本数据类型是值传递，赋值时两个值是各自独立的；</li><li>应用数据类型是指针传递，改变一个值的属性会影响另一个值的属性；</li><li>基本数据类型保存的是值，比较两个基本数据类型是比较值；应用数据类型保存的是对象的地址，比较两个对象是比较两个对象的地址。</li></ul><h3 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h3><h4 id="转成数字类型"><a href="#转成数字类型" class="headerlink" title="转成数字类型"></a>转成数字类型</h4><ul><li>字符串如果是纯数字，则转换成 number；</li><li>字符串如果包含字符，则转换成 NaN；</li><li>布尔值<code>true</code>转换成 1，<code>false</code>转换成 0；</li><li><code>null</code> 转换成 0；</li><li><code>undefined</code> 转换成 <code>NaN</code>；</li><li>对于任意类型的值，可以使用 Number 函数，也可以在被转换的值前面添上 <code>+</code>。</li></ul><h4 id="转成布尔类型"><a href="#转成布尔类型" class="headerlink" title="转成布尔类型"></a>转成布尔类型</h4><ul><li>字符串转布尔值，除了空字符串外，其余都是<code>true</code>；</li><li>数值转布尔值，除了 <code>0</code> 和 <code>NaN</code>，其余都是<code>true</code>；</li><li>null 和 undefined 转布尔值，都是 <code>false</code>；</li><li>对象转布尔值，都是<code>true</code>；</li><li>对任意类型的值，进行两次<code>!</code>操作。</li></ul><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>运算符也称为操作符，对一个和多个值进行运算并取得运算结果，常见 JavaScript 运算符如下：</p><h4 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><code>typeof</code></h4><p>获得变量的类型，返回值是一个 string 类型的值。</p><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>算数运算符共有 5 种：<code>+, -, *, /, %（取余/取模）</code>。</p><ul><li>null 转换为数字为 0；</li><li>2 + NaN = NaN；</li><li>两个字符串相加，两个字符串进行拼接；</li><li>任何值和字符串做加法，都是进行字符串的拼接；</li><li>两个数字字符串进行其他运算，运行对应数字的四则运算（只有加法进行字符串的拼接）；  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">c = <span class="number">1</span> + <span class="number">2</span> + <span class="string">'3'</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>(c);<span class="comment">// 结果是 “33”</span></span></pre></td></tr></table></figure></li><li>/: 取余。</li></ul><h4 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h4><ul><li>一元运算符共有 2 种：<code>+, -（取反）</code>；</li><li>一元运算符会把值转换为 number 类型，然后再进行运算；</li><li>一元运算符的作用，把字符串类型的值，转成数字值。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"5"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> +a);<span class="comment">// 输出为 number</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"abcd"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(+a);<span class="comment">// 输出为 NaN</span></span></pre></td></tr></table></figure></li></ul><h4 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h4><p>自增自减运算符共有两种：<code>++, --</code>。</p><ul><li>++a 和 a++ 的主要区别主要在赋值语句中（表达式的值不一样），++a 先自增再赋值；a++ 先赋值再自增；  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c = <span class="number">10</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">c++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(c++)      <span class="comment">// 输出 11</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="number">20</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = d++ + ++d + d;<span class="comment">// result = 64</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="number">20</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = d++;<span class="comment">// d = 20; 等价于 e = d++; d = e</span></span></pre></td></tr></table></figure></li><li>—a 和 a—，自减。<h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4></li><li>返回值：逻辑运算符的返回值比较复杂，根据操作数和操作步骤共同确定；<ul><li>如果两个操作数都是布尔值，则返回值为布尔值；</li><li>如果其中有一个操作数不是布尔值，则返回值根据短路的结果而不相同；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">-2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(!a);<span class="comment">// 输出为 false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">a = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">b = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a &amp;&amp; b);<span class="comment">// 输出为 false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">b = <span class="number">5</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a &amp;&amp; b);<span class="comment">// 输出为 5</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a || b);<span class="comment">// 输出为 true</span></span></pre></td></tr></table></figure></li></ul></li><li>逻辑运算符共有三种：<code>!, &amp;&amp;, ||</code>；</li><li><code>!</code>，对一个布尔值取反操作，不等于 0 的数值都为<code>true</code>；</li><li>两个操作数都是布尔值的逻辑运算规则如下：<ul><li><code>&amp;&amp;</code>，两个值都为<code>true</code>，返回值为<code>true</code>，否则返回值为<code>false</code>;<ul><li>如果第一个值为<code>false</code>，不会计算第二个值。</li></ul></li><li><code>||</code>，两个值都为<code>false</code>，返回值为<code>false</code>，否则返回为<code>true</code>；<ul><li>如果第一个值为<code>true</code>，不会计算第二个值。</li></ul></li></ul></li><li>如果有一个操作数不是布尔值的逻辑运算规则如下：<ul><li>对于非布尔值的逻辑与运算，系统先将其转换为布尔值，进行运算，并且返回原值；<ul><li>如果两个值都是<code>true</code>，则返回后面的值；</li><li>如果两个值都是<code>false</code>，则返回前面的值；</li><li>这个情况是和短路计算的规则有关。</li></ul></li><li>对于非布尔值的逻辑或运算，系统先将其转换为布尔值，进行运算，并且返回原值。<ul><li>如果两个值都是<code>false</code>，则返回后面的值；</li><li>其余情况，返回第一个<code>true</code>的值；</li><li>同样是和短路计算的规则有关。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">2</span> &amp;&amp; <span class="number">1</span>, a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// 对于 true，输出值为 1（返回后面的值）</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">result = <span class="number">0</span> &amp;&amp; <span class="number">1</span>；</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// 对于 false，输出值为 0</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> || <span class="literal">null</span>)<span class="comment">// 输出为 null</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> &amp;&amp; <span class="literal">null</span>)<span class="comment">// 输出值为 0</span></span></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><ul><li>返回值：就是赋值运算符右边的值；</li><li><code>=</code>右侧的值赋值给左侧的变量；</li><li><code>+=</code>左侧变量的值和右侧的值相加，赋值给左侧的变量；</li><li><code>-=</code>左侧变量的值和右侧的值相减，赋值给左侧的变量；</li><li><code>*=</code>、<code>/=</code>、<code>%=</code>和另外两个类似。</li></ul><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><ul><li>返回值：布尔值。通过关系运算符比较两个值的大小，关系成立，返回<code>true</code>，不成立返回<code>false</code>；</li><li><code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>，四个关系运算符；</li><li>如果一侧是数值，另一侧是字符（<code>1 &gt; &quot;0&quot;</code>），会把非数值转换为数值，返回比较结果；</li><li>如果两侧都是字符串，不会将其转换数值进行比较，而是分别比较字符串中字符的 unicode 编码。在电子商务的应用中，要特别小心。因为用户输入的都是字符串，如果两个字符串比较就很容易出错。解决方案是利用一元运算符或者 Number 函数把 string 转换为 number 类型；</li><li>任何值（包括<code>NaN</code>）和<code>NaN</code> 做任何比较，都返回<code>false</code>；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">-1</span> &gt;= <span class="string">"0"</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(result);<span class="comment">// 返回 false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> &gt;= <span class="literal">NaN</span>);<span class="comment">// 返回 false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"11"</span> &lt; <span class="string">"5"</span>);<span class="comment">// 返回 true</span></span></pre></td></tr></table></figure><h4 id="相等运算符"><a href="#相等运算符" class="headerlink" title="相等运算符"></a>相等运算符</h4><ul><li>返回值：布尔值。四个相等运算符<code>==, ===, !=, !==</code>；</li><li>使用<code>==</code>，如果类型不同，会进行自动类型转换，大部分情况会转换为数字；</li><li>undefined 衍生自 null，这两个值做<code>==</code>比较时，会返回<code>true</code>;</li><li>null 和数字比较时，不进行自动类型转换，永远都返回<code>false</code>；</li><li>NaN 不和任何值相等，包括他自己。需要通过 isNaN() 函数判断一个值是否为 NaN；</li><li>使用<code>!=</code>，判断两个值不相等，如果类型不同，会进行自动类型转换。</li><li><code>===</code>表示全等，不做自动类型转换，类型不等的情况下，直接返回<code>false</code>；</li><li><code>!==</code>表示不全等，不做自动类型转换。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">"1"</span> == 1);// 返回 <span class="literal">true</span>，进行了自动类型转换</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">"true"</span> == <span class="string">"1"</span>);// 返回 <span class="literal">true</span>，字符串和布尔值都转成 number</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">console.log(<span class="string">"true"</span> == <span class="string">"2"</span>);// 返回 <span class="literal">false</span>，字符串和布尔值都转成 number</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">console.log(null == 0);// 返回 <span class="literal">false</span>，null 没有转成数字</span></pre></td></tr></table></figure><h4 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h4><p>条件运算符也叫三元运算符。</p><ul><li>条件表达式 ? 语句 1 : 语句 2，条件表达式求布尔值后，<code>true</code> 执行语句 1，<code>false</code>执行语句 2</li><li>如果条件表达式是一个非布尔值，Javascript 会将其转换为布尔值</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">var a = 30, b = 40, c = 50;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">max = a &gt; b ? a &gt; c ? a : c : b &gt; c ? b : c;</span></pre></td></tr></table></figure><h4 id="运算优先级"><a href="#运算优先级" class="headerlink" title="运算优先级"></a>运算优先级</h4><ul><li>数学运算：括号内先，括号外后，先乘除，后加减；</li><li>遇到搞不清楚的优先级，可以用括号强制；</li><li>常用优先级：<ul><li>new, [], . ；</li><li>()；</li><li>自增运算符：++, —；</li><li>单目运算符：!, +, -, ~, typeof, void, delete；</li><li>乘除运算符：*, /, %；</li><li>双目运算符：+, -；</li><li>移位运算符：</li><li>比较运算符：&gt;, &gt;=, &lt;, &lt;=；</li><li>相等运算符：==, !=, ===；</li><li>逻辑与运算符：&amp;&amp;；</li><li>逻辑或运算符：||；</li><li>条件运算符：?:；</li><li>赋值运算符：=, +=, -=, *=, /=, %=。</li></ul></li></ul><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><ul><li>条件成立执行某些语句，条件不成立则不执行这些语句，或者执行其他语句；</li><li>语法：<ul><li>如果条件表达式的值为<code>true</code>，执行语句块，如果为<code>false</code>，则不执行语句块；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  语句块；</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>如果条件表达式的值为<code>true</code>，执行语句块 1，如果为<code>false</code>，执行语句块 2；  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  语句块 <span class="number">1</span>；</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  语句块 <span class="number">2</span>；</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>多个条件表达式的判断，当语句执行时，会从上到下对条件表达式进行求值判断，如果值为<code>true</code>，则执行当前语句块，值为<code>false</code>则继续向下判断。该语句只会有一个代码块执行，执行完后，就会跳出整个 if 语句；  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件表达式 <span class="number">1</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  语句块 <span class="number">1</span>；</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式 <span class="number">2</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  语句块 <span class="number">2</span>；</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (条件表达式 n) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  语句块 n;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  语句块；</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul></li><li><p>举例</p><ul><li><p>举例 1: 成绩 100 时，输出”你真优秀“，当成绩为 80~99，输出“你真棒”，当成绩为 60～80 时，输出“继续努力啊”，其它，输出“你要注意了”；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">a = prompt(<span class="string">"请输入成绩："</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a == <span class="number">100</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"你真优秀"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; <span class="number">80</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"你真棒"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a &gt; <span class="number">60</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"继续努力啊"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">console</span>.log(<span class="string">"你要注意了"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>举例2: 键盘上输入三个整数，按照从小到达排列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a, b, c, min, med, max;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">a = +prompt(<span class="string">"请输入第一个数："</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">b = +prompt(<span class="string">"请输入第二个数："</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">c = +prompt(<span class="string">"请输入第三个数："</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &lt; b &amp;&amp; a &lt; c) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">min = a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &lt; a &amp;&amp; b &lt; c) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">min = b;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">min = c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt; b &amp;&amp; a &gt; c) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">max = a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &gt; a &amp;&amp; b &gt; c) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">max = b;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">max = c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (a &gt; b &amp;&amp; a &lt; c || a &lt; b &amp;&amp; a &gt; c) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">med = a;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b &gt; a &amp;&amp; b &lt; c || b &lt; a &amp;&amp; b &gt; c) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">med = b;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">med = c;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">alert (<span class="built_in">String</span>(min) + med + max);</span></pre></td></tr></table></figure></li></ul></li></ul><h3 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h3><ul><li>语法：<ul><li>执行对应表达式中后包含的所有语句块，所以需要用 break 跳出 switch 分支语句。如果都没有则执行 default 包含的语句块；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (条件表达式) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">case</span> 表达式 <span class="number">1</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">case</span> 表达式 <span class="number">2</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">case</span> 表达式 n:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">default</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul></li><li>举例：<ul><li>举例 1：成绩大于 60 分，输出“你合格了！”<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> score;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">score  = +prompt(<span class="string">"请输入成绩："</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (score &gt;= <span class="number">60</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="literal">true</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"你合格了"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="literal">false</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"你挂了！"</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul></li></ul><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p>循环语句可以反复执行一段代码。创建一个循环，一般需要三个步骤：</p><ul><li>初始化表达式：初始化一个变量；</li><li>条件表达式：在循环中设置和该变量相关的条件表达式；</li><li>更新表达式：在循环体中，改变这个变量值；</li></ul><h4 id="while-循环语句"><a href="#while-循环语句" class="headerlink" title="while 循环语句"></a>while 循环语句</h4><ul><li>while 语句先对表达式执行求值判断，如果为<code>true</code>则执行循环体内的语句。循环体执行完后，会返回对表达式执行求值判断，直到条件判断表达式结果为<code>false</code>；</li><li>死循环（条件表达式永远为<code>true</code>）在开发的时候要尽量避免。一种办法是利用 <code>break</code> 退出；</li><li>do…while 是先执行再判断，这个语句保证循环体至少被执行一次。</li></ul><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span>(条件表达式)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">break</span>;<span class="comment">// 跳出 while 循环</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">while</span> (条件表达式)</span></pre></td></tr></table></figure><h5 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h5><ul><li>举例 1：年利率5%，从 1000 元变到 5000 元要多少时间。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum, year;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">sum = <span class="number">1000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">year = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (sum &lt; <span class="number">5000</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  sum = sum * <span class="number">1.05</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  year++;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"year: "</span> + year);</span></pre></td></tr></table></figure></li></ul><h4 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h4><ul><li>for 循环将三个表达式放在 for 后面的括号中，其中初始化表达式只会执行一次；</li><li>for 循环的三个部分都可以移到括号的外面；</li></ul><h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式; 条件表达式; 更新表达式) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  语句块;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h5 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h5><ul><li><p>举例 1：打印 1～100 之间所有奇数之和。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i = i + <span class="number">2</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">    sum = sum + i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="built_in">console</span>.log(i + <span class="string">": "</span> + sum);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li><p>举例 2：打印水仙花数。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> i_1, i_2, i_3;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">sum = <span class="number">1000</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  i_1 = <span class="built_in">parseInt</span>(i/<span class="number">100</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">  i_2 = <span class="built_in">parseInt</span>((i - i_1 * <span class="number">100</span>)/<span class="number">10</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  i_3 = (i - i_1 * <span class="number">100</span> - i_2 * <span class="number">10</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  sum = <span class="built_in">Math</span>.pow(i_1, <span class="number">3</span>) + <span class="built_in">Math</span>.pow(i_2, <span class="number">3</span>) + <span class="built_in">Math</span>.pow(i_3, <span class="number">3</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span>(sum == i) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(i);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">  &#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li><li>举例 3：打印 1000 以内的质数  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> primeArr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x, isPrime;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">primeArr[<span class="number">0</span>] = <span class="number">2</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">3</span>; i &lt;= <span class="number">1000</span>; i = i + <span class="number">2</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">isPrime = <span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> primeArr) &#123;<span class="comment">// x 是一个索引值</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i % primeArr[x] == <span class="number">0</span>) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">isPrime = <span class="literal">false</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isPrime == <span class="literal">true</span>)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">primeArr[primeArr.length] = i;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (x <span class="keyword">in</span> primeArr) &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(primeArr[x]);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(primeArr.length);</span></pre></td></tr></table></figure></li></ul><h4 id="退出语句"><a href="#退出语句" class="headerlink" title="退出语句"></a>退出语句</h4><h5 id="break-语句"><a href="#break-语句" class="headerlink" title="break 语句"></a>break 语句</h5><ul><li>退出 switch、do…while 和 for 循环语句；</li><li>break 会立即终止离 break 最近的循环语句；</li><li>可以为循环语句创建一个 label，用 break 跳出外层循环。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">outer:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt;=<span class="number">5</span>; i++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;=<span class="number">5</span>; j++)&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span> outer;<span class="comment">// 结束指定的循环，而不是最近的</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure></li></ul><h5 id="continue-语句"><a href="#continue-语句" class="headerlink" title="continue 语句"></a>continue 语句</h5><ul><li>退出 do…while 和 for 当次循环，进行下一次循环；</li><li>continue 只会对离 continue 最近的循环起作用。</li></ul><h3 id="常见基本函数"><a href="#常见基本函数" class="headerlink" title="常见基本函数"></a>常见基本函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">c = <span class="built_in">String</span>(c);<span class="comment">// 将 c 转换为字符串</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">c = <span class="built_in">Number</span>(c);<span class="comment">// 将 c 转换为数字</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="literal">NaN</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">isNaN</span>(b);<span class="comment">// 返回 true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">c = prompt()<span class="comment">// 提示用户输入信息，返回类型是 string</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">c = <span class="built_in">parseInt</span>(<span class="number">9.9</span>)<span class="comment">// 对 9.9 取整为 9</span></span></pre></td></tr></table></figure><h3 id="unicode-编码"><a href="#unicode-编码" class="headerlink" title="unicode 编码"></a>unicode 编码</h3><ul><li>在 JavaScript 中使用 unicode，引用格式<code>\u0054</code></li><li>在网页中使用 unicode，使用<code>&amp;#&lt;code&gt;</code>，code 需要十进制</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript 是一种前端的开发语言，当然发展到现在也被用做后端的开发，比如借助于 Node.js。由于现在大量的前端框架会基于 JavaScript 和 Node.js，所以了解 JavaScript 是非常重要的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发语言" scheme="http://tohnee123.github.io/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="JavaScript" scheme="http://tohnee123.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Linux 学习笔记（三）</title>
    <link href="http://tohnee123.github.io/2020/01/03/linux-basic003-00009/"/>
    <id>http://tohnee123.github.io/2020/01/03/linux-basic003-00009/</id>
    <published>2020-01-03T13:41:52.000Z</published>
    <updated>2019-12-06T02:45:21.824Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="操作系统" scheme="http://tohnee123.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://tohnee123.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 学习笔记（二）</title>
    <link href="http://tohnee123.github.io/2019/12/30/linux-basic002-00008/"/>
    <id>http://tohnee123.github.io/2019/12/30/linux-basic002-00008/</id>
    <published>2019-12-30T13:41:38.000Z</published>
    <updated>2019-12-06T02:45:07.857Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="操作系统" scheme="http://tohnee123.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://tohnee123.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 学习笔记（一）</title>
    <link href="http://tohnee123.github.io/2019/12/24/linux-basic001-00005/"/>
    <id>http://tohnee123.github.io/2019/12/24/linux-basic001-00005/</id>
    <published>2019-12-25T02:31:43.000Z</published>
    <updated>2019-12-12T00:25:29.002Z</updated>
    
    <content type="html"><![CDATA[<p>Linux 我应该是努力过多次，始终只是皮毛。这次还是打算全面的了解 Linux 的运维技术和最新的技术趋势。采用的 os 版本是 centos 7.x。</p><h2 id="目录结构和分区"><a href="#目录结构和分区" class="headerlink" title="目录结构和分区"></a>目录结构和分区</h2><p>如果一个硬盘采用 MBR 分区，这个硬盘最多只能有四个主分区或者扩展分区（扩展分区最多一个），一个扩展分区上可以有若干个逻辑分区</p><ul><li>对于 Linux 来说，一个 SATA 硬盘，前面四个分区是供主分区和扩展分区使用，分别为 /dev/sda1 ~ /dev/sda4。逻辑分区从 /dev/sda5 开始。</li></ul><a id="more"></a><p>我们在一个新的硬盘上安装 Linux，一般会做如下考虑：</p><ul><li>一个 /boot 区，一般 200M 左右，安装 Linux 的 Kernel 文件。单独一个区，在系统出现问题的时候会比较好解决；</li><li>一个 swap 分区，一般是内存的2倍以上，不大于 8G；</li><li>一个 / 分区，一般 10G 以上；</li><li>剩下的可以给 /data，作为数据分区。</li></ul><h2 id="Linux-的硬件设置"><a href="#Linux-的硬件设置" class="headerlink" title="Linux 的硬件设置"></a>Linux 的硬件设置</h2><h3 id="时间设置"><a href="#时间设置" class="headerlink" title="时间设置"></a>时间设置</h3><ul><li>Linux 有两个时间，一个是 BIOS 中，一个是操作系统的时间，这两个时间可以一致，也有可能不一致。其中<code>clock</code>指令用于修改 BIOS 硬件时间，<code>date</code>指令用于修改操作系统时间；</li><li>和 ntp 服务器同步时间，<code># ntpdate &lt;ntp server ip&gt;</code>；</li><li>centos 6.x ~ 7.x 配置 <code>/etc/ntp.conf</code>，添加<code>server x.x.x.x iburst</code>。然后启动 ntp 的服务；<ul><li>6.x: <code># service ntpd start</code>；</li><li>7.x: <code># systemctl start ntpd</code>；</li></ul></li><li>centos 7.x 也可以配置 <code>/etc/chrony.conf</code>；</li><li>时区的配置信息在<code>/etc/localtime</code>文件中<ul><li>7.x: <code># localectl list-locales</code>，列出所有支持的语言和时区配置；<code># localectl status</code>，列出当前的设置</li></ul></li></ul><h3 id="网卡设置"><a href="#网卡设置" class="headerlink" title="网卡设置"></a>网卡设置</h3><ol><li>centos 7.x 更改了网卡缺省的名字，如果修改网卡名称符合以前的命名规则，需要修改<code>grub.cfg</code>这个文件的设置。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /boot/grub2/grub.cfg</span></span></pre></td></tr></table></figure>寻找 menuentry 下的 linux16，增加<code>net.ifnames=0</code>，重新启动。</li></ol><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h2 id="目录权限"><a href="#目录权限" class="headerlink" title="目录权限"></a>目录权限</h2><h2 id="软件包安装"><a href="#软件包安装" class="headerlink" title="软件包安装"></a>软件包安装</h2><h3 id="常用的软件包"><a href="#常用的软件包" class="headerlink" title="常用的软件包"></a>常用的软件包</h3><ul><li>net-tools：包括 ifconfig<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3></li></ul><h2 id="Linux-常用简单命令集"><a href="#Linux-常用简单命令集" class="headerlink" title="Linux 常用简单命令集"></a>Linux 常用简单命令集</h2><h3 id="查看系统状态"><a href="#查看系统状态" class="headerlink" title="查看系统状态"></a>查看系统状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">// 查看硬件状态</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># free -h// 以 M 为单位看系统内存</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># lsblk// 系统的分区情况和外置设备的挂载状况</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># lscpu// 看 CPU 的情况</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /proc/meminfo// 获得和内存相关的信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">// 查看操作系统</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/centos-release   // 安装的 centos 版本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># lsb_relase -a    // 安装的 centos 版本</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># uname -r        // 内核的版本</span></span></pre></td></tr></table></figure><h3 id="与-shell-相关"><a href="#与-shell-相关" class="headerlink" title="与 shell 相关"></a>与 shell 相关</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># tty      // 当前终端名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># who     // 当前登陆本服务器所有的终端名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># whoami    // 我是谁，简略信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># who am i   // 我是谁更详细的信息，包括登陆的终端名和 IP 地址</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo $SHELL  // 当前运行的 Shell</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># cat /etc/shells // 当前系统支持的所有 Shell，对于/usr/sbin/nologin shell，主要是给应用程序使用。不可以登陆</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># echo $PS1// 命令提示符设置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># PS1="[\u@\h]$"    //去掉 working directory</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># PS1="\[\e[1;5;41;33m\][\u@\h \w]\\$\[\e[0m\]"    // 对于生产环境建议用特别的提示标识，5表示闪烁</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># which &lt;command&gt;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># whereis &lt;command&gt;     // 和该命令相关的一些文档信息</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># hash          //当前被缓存的命令路径</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># alias cdnet = "cd /etc/sysconfig/network-scripts/"   // 别名一般保存在用户家目录中的 .bashrc 中</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># unalias &lt;别名&gt;      // 取消别名</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># . .bashrc    // 使修改后的 .bashrc 立即生效，等同于 source .bashrc</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># enable       // 显示当前 shell 的内部命令列表</span></span></pre></td></tr></table></figure><h3 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">// 时区、时间语言和地区有关指令</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># clock -w// copy 操作系统的时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># clock -s// write 时间到操作系统</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># date mmddhhmmyyyy.ss// 设置操作系统的时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># ntpdate &lt;ip&gt;// 同步时间</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># localectl list-locales// 列出支持的所有地区设置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># localectl status// 语言设置</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># timedatectl list-timezones// 支持的时区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># timedatectl status// 当前时区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># timedatectl set-timezone &lt;时区名&gt;// 设置时区</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># cal// 本月日历</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># cal -y// 本年日历</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">// 查看网卡信息</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># ifconfig    // 看网卡地址</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">// 关机</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># poweroff// 关机</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># halt// 关机</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># shutdown -r +3// 关机或者重启，可以指定时间。本例中，3 分钟后重启</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># shutdown -c// 取消指定时间的关机</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">// 安装下载软件</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpm -ivh &lt;package name&gt;// 安装已下载的 rpm 包</span></span></pre></td></tr></table></figure><h3 id="用户管理-1"><a href="#用户管理-1" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># w // 查看当前有哪些用户登陆到本机，以及正在执行的操作</span></span></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux 我应该是努力过多次，始终只是皮毛。这次还是打算全面的了解 Linux 的运维技术和最新的技术趋势。采用的 os 版本是 centos 7.x。&lt;/p&gt;
&lt;h2 id=&quot;目录结构和分区&quot;&gt;&lt;a href=&quot;#目录结构和分区&quot; class=&quot;headerlink&quot; title=&quot;目录结构和分区&quot;&gt;&lt;/a&gt;目录结构和分区&lt;/h2&gt;&lt;p&gt;如果一个硬盘采用 MBR 分区，这个硬盘最多只能有四个主分区或者扩展分区（扩展分区最多一个），一个扩展分区上可以有若干个逻辑分区&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 Linux 来说，一个 SATA 硬盘，前面四个分区是供主分区和扩展分区使用，分别为 /dev/sda1 ~ /dev/sda4。逻辑分区从 /dev/sda5 开始。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="操作系统" scheme="http://tohnee123.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Linux" scheme="http://tohnee123.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>如何建立一个类似这样的网站（三）</title>
    <link href="http://tohnee123.github.io/2019/12/19/web-howtobuildthisblog03-00004/"/>
    <id>http://tohnee123.github.io/2019/12/19/web-howtobuildthisblog03-00004/</id>
    <published>2019-12-20T02:31:04.000Z</published>
    <updated>2019-12-09T17:48:16.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>这一部分，我们的主要目标如下：</p><ul><li>对已经安装好的博客系统进行必要的优化工作<ul><li>功能上的优化</li><li>形式上的优化</li><li>具体功能的配置，比如修改颜色之类</li></ul></li></ul><a id="more"></a><h3 id="功能上的优化"><a href="#功能上的优化" class="headerlink" title="功能上的优化"></a>功能上的优化</h3><ul><li>将主页展示的内容进行缩减</li><li>在主页上隐藏指定的文章</li><li>鼠标指针在非工作区有趣的图形</li><li>每篇文章增加字数统计和阅读时间估计</li><li>配置搜索（search）功能</li><li>加入豆瓣的页面</li><li>增加文章密码的功能</li></ul><h3 id="形式上的优化"><a href="#形式上的优化" class="headerlink" title="形式上的优化"></a>形式上的优化</h3><h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><ul><li>这篇文章只包括了我所感兴趣的 Hexo 设置，在网络上还有很多其他朋友的设置，有兴趣的可以到处看看</li><li>很多设置有不止一种方法，我采用的办法不见得最好，但是保证在我的博客上是工作的</li><li>Hexo 和 Next 也在不断发展，部分配置文件也在不断变化之中。我的 Hexo 版本是4.0，Next 的版本是7.6.0</li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p><a href="http://yearito.cn/posts/hexo-advanced-settings.html" target="_blank" rel="noopener">1. Hexo 搭建个人博客系列：进阶设置篇</a><br><a href="http://blog.smallerpig.com/set-hexo-show-more-button-on-indexpage.html" target="_blank" rel="noopener">2. 让hexo的首页只显示文章的部分内容而不是全部</a><br><a href="https://www.jianshu.com/p/79fe9fb9dfa0" target="_blank" rel="noopener">3. Hexo 设置首页隐藏指定文章</a><br><a href="https://blog.csdn.net/weixin_39345384/article/details/80544660" target="_blank" rel="noopener">4. NexT v6.0+ 背景动画Canvas_nest设置无效的解决方案</a></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="功能上的优化-1"><a href="#功能上的优化-1" class="headerlink" title="功能上的优化"></a>功能上的优化</h3><h4 id="主页内容缩减"><a href="#主页内容缩减" class="headerlink" title="主页内容缩减"></a>主页内容缩减</h4><p>在<a href="http://blog.smallerpig.com/set-hexo-show-more-button-on-indexpage.html" target="_blank" rel="noopener">资源1</a>中介绍了三种方法，我个人使用第2种方法，在文章中加入<code>&lt;!--more--&gt;</code>这种方法比较多，主要是可以比较精确的控制。</p><h4 id="隐藏指定文章"><a href="#隐藏指定文章" class="headerlink" title="隐藏指定文章"></a>隐藏指定文章</h4><p>有的时候，我的文章尚未完成，但是可能已经发布到自己的 github 仓库，这个时候实际上所有人都可以看到这篇文章。一种变通的解决方案是把这篇文章从主页中隐藏，这样就不会浪费别人的时间了。<br>与<a href="https://www.jianshu.com/p/79fe9fb9dfa0" target="_blank" rel="noopener">资源2</a>的方法类似我采用的方案是在开头增加一个 visible 参数，visible 为 true 在主页可见，false 在主页不可见。然后修改主题的index.swig 文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi index.swig \\ 路径：blog\themes\next\layout\</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> post.hidden != <span class="literal">false</span> %&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#123;&#123; post_template.render(post, <span class="literal">true</span>) &#125;&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">&#123;% endif %&#125;</span></pre></td></tr></table></figure></p><h4 id="鼠标指针在非工作区"><a href="#鼠标指针在非工作区" class="headerlink" title="鼠标指针在非工作区"></a>鼠标指针在非工作区</h4><ul><li>我的 Next 6.0 将<code>canvas_nest: true</code>后，确实没有效果。需要根据<a href="https://blog.csdn.net/weixin_39345384/article/details/80544660" target="_blank" rel="noopener">资源3</a>的方法，从 github 上 clone 相应的 js 文件后，该功能才能启用。  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi _config.yml   // 在自己的 blog 目录下</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">// 设置如下：canvas_nest: <span class="literal">true</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># cd themes/next    // 从自己的 blog 目录下，进入theme/next目录</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># git clone https://github.com/theme-next/theme-next-canvas-nest source/lib/canvas-nest  从 github clone 对应的 js 文件</span></span></pre></td></tr></table></figure></li></ul><h4 id="字数统计、阅读时长"><a href="#字数统计、阅读时长" class="headerlink" title="字数统计、阅读时长"></a>字数统计、阅读时长</h4><ul><li>安装插件：  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span></pre></td></tr></table></figure></li><li>主题配置信息如下:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  separated_meta: true  # false 会显示一行</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  item_text_post: true  # 显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  item_text_total: true #底部footer是否显示字数统计属性文字</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  awl: 4 #计算字数的一个设置,没设置过</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  wpm: 75 #一分钟阅读的字数</span></pre></td></tr></table></figure>  站点配置新增如下:  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> #文章内是否显示</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  symbols: true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  time: true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> # 网页底部是否显示</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">  total_symbols: true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">  total_time: true</span></pre></td></tr></table></figure></li></ul><h4 id="配置搜索功能"><a href="#配置搜索功能" class="headerlink" title="配置搜索功能"></a>配置搜索功能</h4><ul><li>安装插件：  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span></pre></td></tr></table></figure></li><li><p>Hexo 站点配置文件如下：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">search:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  path: search.xml</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  field: post</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  format: html</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  limit: 100</span></pre></td></tr></table></figure><p>特别需要注意的是，search前面不能有空格，否则会报错。</p></li><li><p>Next 主题配置文件如下:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">local_search:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  enable: true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  trigger: auto</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  top_n_per_article: 1</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">  unescape: false</span></pre></td></tr></table></figure><h4 id="配置文章加密功能"><a href="#配置文章加密功能" class="headerlink" title="配置文章加密功能"></a>配置文章加密功能</h4></li><li><p>安装插件：</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span></pre></td></tr></table></figure></li><li><p>Hexo 站点配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">encrypt:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">  enable: true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  abstract: 这是一篇加密文章，内容可能涉及个人情感、家庭交流或者其他不适宜公开的内容。</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  message: 请输入密码，查看文章。</span></pre></td></tr></table></figure></li><li><p>在需要加密文章的 md 文件头部加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">title: 每周和女儿交流的提纲（2019.12.14）</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">date: 2019-12-08 13:29:56</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">tags: [&#39;女儿&#39;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">categories: [&#39;家庭&#39;]</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">password: 设置的密码</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">abstract: 可以定义本片文章的摘要</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">message: 可以定义本篇文章的提示</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr></table></figure></li></ul><h3 id="形式上的优化-1"><a href="#形式上的优化-1" class="headerlink" title="形式上的优化"></a>形式上的优化</h3><h3 id="具体功能的配置"><a href="#具体功能的配置" class="headerlink" title="具体功能的配置"></a>具体功能的配置</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;这一部分，我们的主要目标如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对已经安装好的博客系统进行必要的优化工作&lt;ul&gt;
&lt;li&gt;功能上的优化&lt;/li&gt;
&lt;li&gt;形式上的优化&lt;/li&gt;
&lt;li&gt;具体功能的配置，比如修改颜色之类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="应用程序" scheme="http://tohnee123.github.io/categories/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="云服务" scheme="http://tohnee123.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="github" scheme="http://tohnee123.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://tohnee123.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>每周和女儿交流的提纲（2019.12.21）</title>
    <link href="http://tohnee123.github.io/2019/12/16/family-daughterweekly-002-00012/"/>
    <id>http://tohnee123.github.io/2019/12/16/family-daughterweekly-002-00012/</id>
    <published>2019-12-16T05:29:56.000Z</published>
    <updated>2019-12-14T00:00:35.169Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">请输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="67d962d1aa0e2ee6fb61fba05b38daa4e8f5dc756f54a1aaf85460eee9b9d85a">8cbe5682761c1c4407aea697ce28d69c04c92129135d6781fc15f262611035a0b77a4f2cc3243213c04baf13b0b741c02767cb5387d38e84149a0d5accfeadcfa8d772d9c1d7a50037be7ad3caa66c91f27d21ba8152213f326595acc89ecd1f18f5429ae70ca8759a1397c001e7b9a4d5f84c364f84e7893918a48bcae2d1c4b6b066f51279115b88581bab6e2efdb1c4d4263d2512991ca5eccd56e4ce25063beafdc410c7a74f81245c802208ed2a39fcdae2c9a4f433526b977e240e2cdecbc9a731dfafc33c0a1acf0809cd82c6e427c5b04fb013394b87a0dd88186337cf329cbd7496764ce437f1de993a4db3fe77cedca0b4a7347e64cc806b64a8d8f67134fbceaac2bed432abf2b22abe7154b7162e26de0970d81e7f5fd5f0adc25bc1be4096b301ea41438aa05b9acbd445773b0527b4ebe13fc612c3c8e0718dd34950eac6aebdebe6496ea4be184dd7ed1335e4a3fcd832527cbc19c9d4fbc855c41297ff168aad440f935ec5fcce9a61a833f8d976c6a7d5fb6758eaabf39077d5d871cd71af5f8cc7f1311a7ceec42c7c10191f26c2cedcfe74d4e5e9822a780b0c96738fdab6c440be02f110221387871b7ab480b03e254f0290dbf8a50ad1058f006ee5d7b866636cbd05e22fca95dd0ce389313627fc711fd44c806308c1e1cd377ff6cda0bcbdf93a26b2f5570ed75d75ae0d38a93b0a31d29e1bbb20d2af1db4e33eaa71f6a65802cb5957686d1d42c48b5bd1c56c05ab5417d052ccb5bc923c2077350d3b6b1b358204cfa7bd47a3190996fd25538e99f4d2e6bc756ec20980e1c5d0af19914afebd28f2bbc81eec5a0cf05c3d9f11afd08831a2ad828f2245472c312fc966060697574aa8233daa8a4aef6e216729dc9a4088f379a6becb5dfbbcd361b03a7ae7d01dddd6900d29732fe1d489e0e85e1e2d93e8daf2d1b0d45e5ce345ebff8ac6efd06f3d0a64bed54aee897963634bc45e666a191576121c20d5a8e337d31aa60bf6da8f99f36e63fc7182be924bba984129fbfdcbf75d9670f77d4e3c0543397ca1f063d5fd23b2eb2e8f78f622f0d324464cf3035e260f284aca5573344240ff8fc8905ae50cf1e81b052f1658c14957ed0b6e1900e136e1ea086a2713b6b29db76090af75364b37f9f5b7035c3bb5a99f60602c5bffd78a3da9c69c218f4dbc77c27b5e0ed6e5c09f953df51a057a57ca14aa48fe50e005c59ccbcb133edceb4c0919cb8cb144e5079d0883dd8a33a9560fc4e1bbe4d1a9e4bbb452f4ef97060005a84259f52767592c622901e52e3d66af389c1bdc656d875b6859a868adfe01e7f6ca56223504db7e5ccb2a07afd8fc260dab1b97e8754856315c2b0161bdcc42087659182c26a8b7269895eb58a64834c97eeed0a918bb9a840b44e779f918a223f25a66968dcd757edddf5404691f34a0bcda9e3e7e5a00f3ab8f7e33408fb5e5a1da5e1f20e3b58190fe72383fa7da31d5b3a2a672cd3bc252f478f410bc02ba2632bfa514bdc68bb9d5896c449c9efb1c23cb2d0fcd2df6b8ee5207800c1f6e5c80870be7a4d0d13f4c83e1928a32e6e3e262fb7131604d016a4011f8e8c162a351f7f95af6b8f65719f4a0cb18e6d55f0fb5736c622ce29be654a6d12437ce68f52a716de51b69f3ebb2ebd57748a7ef6f219417e803bd658ed8fd187c51944ad86229b126b1b8cb8c3dfbdc5b7d56a6071117affad5536d9c9e0695c21b29ab08bbfa0e2fb2b31fab18f6c36187dafc9c61edb473feb5c743f508e4dbba2166d7c7c2f5eae02c3d5ad9b7483638767361add4167ef225d7e0ef19228ffde845fd0db1e280c4e485f618f8054bf3d77a0c159f7f102b1a17555edf38930d17c7620dbbfd8124c9bb2b8c8c8c9e713b68a7ac76fb8c48417261f496c5e77aaa3fa2109958d204faea2a8544e1e54225d423f618f8666c27aa9b611b306d3b031c9c8e863138268856246725a7d65b2d781e640d4570c3e4996eac752f0f5bc1f7e12b649f70df1cbb96e14655dd07d18f38ed8f22f1e7ad07509e578953bde951de51d120ff3e9eeb811ef85720df1b1569d06c243627efc0b83740291ed3b6806d49026ea6b01662c5e8a723e179797da752710a5b172d56a2641da2f5d40406d1a2e0671fb2e158aed08fa85b9d25e386dfbd1158e2254ff2c4e6eea2ac936940925fcafe3dbcd08a3ab94942d37dfa68b3f026fac78d7d1e777aef3e832b43c3a226a2a9b4360dee113ae581a802</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能尚未完成或者涉及个人情感、家庭交流或者其他不适宜公开的内容。
    
    </summary>
    
    
      <category term="家庭" scheme="http://tohnee123.github.io/categories/%E5%AE%B6%E5%BA%AD/"/>
    
    
      <category term="女儿" scheme="http://tohnee123.github.io/tags/%E5%A5%B3%E5%84%BF/"/>
    
  </entry>
  
  <entry>
    <title>如何建立一个类似这样的网站（二）</title>
    <link href="http://tohnee123.github.io/2019/12/15/web-howtobuildthisblog02-00003/"/>
    <id>http://tohnee123.github.io/2019/12/15/web-howtobuildthisblog02-00003/</id>
    <published>2019-12-15T15:20:32.000Z</published>
    <updated>2019-12-10T19:55:41.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>这一部分，我们的主要目标如下：</p><ul><li>安装 Node.js、Hexo 和 Next 主题。这样我们就拥有了一个阶段性成果。</li><li>配置 Next 的重点参数。</li></ul><a id="more"></a><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><ul><li><a href="https://www.jianshu.com/p/d95cff938277" target="_blank" rel="noopener">1. NexT主题配置</a></li><li><a href="https://blog.csdn.net/science_Lee/article/details/84633237" target="_blank" rel="noopener">2. Hexo语言不生效问题</a></li><li><a href="https://tding.top/archives/42c38b10" target="_blank" rel="noopener">3. Hexo-NexT (v7.0+) 主题配置</a></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="重点步骤"><a href="#重点步骤" class="headerlink" title="重点步骤"></a>重点步骤</h3><ol><li>安装Node.js</li><li>利用 npm 安装 Hexo</li><li>安装 Next 主题</li></ol><h3 id="配置-Hexo"><a href="#配置-Hexo" class="headerlink" title="配置 Hexo"></a>配置 Hexo</h3><ol><li>更改 Hexo 的默认主题。我不喜欢 Hexo 自带的主题，选择了现在比较流行的 Next 主题，版本是 Next 7.6.0。这个版本配置文件有一些更改，但是大部分前面提供的资源内容还是可以用在这个版本上；</li><li>可以直接从 Github 上安装 Next 7.6.0。安装命令如下：<code>git clone --branch v6.0.0 https://github.com/theme-next/hexo-theme-next themes/next</code>。指令要在主目录下键入；</li><li>修改博客主目录下的 <code>_config.yml</code> 文件内容。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">timezone: Asia&#x2F;Shanghai</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">url: http:&#x2F;&#x2F;tohnee123.github.io</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">theme: next</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">deploy:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  type: &#39;git&#39;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">  repo: git@github.com:tohnee123&#x2F;tohnee123.github.io.git</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">  branch: master</span></pre></td></tr></table></figure></li></ol><h4 id="增加文章"><a href="#增加文章" class="headerlink" title="增加文章"></a>增加文章</h4><p>增加一篇新的文章在博客的主目录下输入指令<code>hexo n &quot;文章名&quot;</code>就可以了。新的 Markdown 文件会产生在<code>source/_posts</code>目录下。</p><h4 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h4><p>发布写好后的文章需要两条指令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo gen</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ hexo dep</span></pre></td></tr></table></figure></p><h4 id="访问文章"><a href="#访问文章" class="headerlink" title="访问文章"></a>访问文章</h4><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>有的时候，想在发布到网上之前，先在本地看看文章的内容。可以输入如下指令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ hexo s &lt;-p port number&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">在浏览器中输入：http://localhost:4000</span></pre></td></tr></table></figure></p><h4 id="Hexo-插件"><a href="#Hexo-插件" class="headerlink" title="Hexo 插件"></a>Hexo 插件</h4><ul><li>查看已安装的 Hexo 插件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ npm ls --depth 0</span></pre></td></tr></table></figure></li></ul><h3 id="配置-Next"><a href="#配置-Next" class="headerlink" title="配置 Next"></a>配置 Next</h3><p>我选用的 Next 主题的版本是 7.6.0，也可以在 github 上下载，<a href="https://github.com/theme-next/hexo-theme-next/tags" target="_blank" rel="noopener">下载 Next 指定版本</a>。下载的 zip 文件解压后，复制到<code>theme</code>下就可以。注意要把目录名改为<code>next</code>。</p><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>主要的 Next 配置文件如下：</p><ol><li><code>themes/next</code>目录下的<code>_config.yml</code>；</li><li><code>themes/next/languages</code>目录下的语言文件；</li></ol><h4 id="更改语言"><a href="#更改语言" class="headerlink" title="更改语言"></a>更改语言</h4><p>将 <code>themes/next/languages</code> 目录下的<code>zh-CN.yml</code> 更名为 <code>zh-Hans.yml</code></p><h4 id="更改风格"><a href="#更改风格" class="headerlink" title="更改风格"></a>更改风格</h4><p>Next 提供了四种不同的风格，我个人比较喜欢 Gemini 风格。需要修改 Next 的<code>_config.yml</code>。找到<code>Schemes</code>这个 Section，修改如下，启用 Gemini 风格。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#scheme: Muse  //默认主题</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#scheme: Mist</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="comment">#scheme: Pisces</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">scheme: Gemini</span></pre></td></tr></table></figure></p><h4 id="标签和类别页面"><a href="#标签和类别页面" class="headerlink" title="标签和类别页面"></a>标签和类别页面</h4><p>增加标签和类别页面。默认情况下这两个是没有页面链接的，所以需要按照资源3的建议增加。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo new page tags</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑tags/index.md</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">title: 标签</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">date: 2019-06-29 11:35:42 <span class="comment">#时间随意</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span> <span class="comment">#类型一定要为tags</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">comments: <span class="literal">false</span> <span class="comment">#提示找个页面不需要评论,后续评论插件那里会详细介绍</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo new page categories</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑categories/index.md</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">title: 文章分类</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">date: 2018-10-15 00:03:57</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>: <span class="string">"categories"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">comments: <span class="literal">false</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">---</span></pre></td></tr></table></figure></p><h4 id="MathJax"><a href="#MathJax" class="headerlink" title="MathJax"></a>MathJax</h4><p>将 mathjax 下的 enable 设定为 true 即可。 cdn 用于指定 MathJax 的脚本地址，默认是 MathJax 官方提供的 CDN 地址。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"># MathJax Support</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">mathjax:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">  enable: true</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">  cdn: &#x2F;&#x2F;cdn.mathjax.org&#x2F;mathjax&#x2F;latest&#x2F;MathJax.js?config&#x3D;TeX-AMS-MML_HTMLorMML</span></pre></td></tr></table></figure></p><p>$\alpha$</p><script type="math/tex; mode=display">\begin{equation}e=mc^2\end{equation}\label{eq1}</script><p>the famous matter-energy equation $\eqref{eq1}$ proposed by Einstein ..</p><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>安装Node.js。目前我是从 node.js 网站上直接下载 OSX 版本的二进制文件直接安装的。在网上还有另外两种办法，一种是通过 homebrew，一种是通过 crul，这两种办法现在我没有试过，也不知道通过多种渠道安装不同版本的 node.js 会有什么后果。</li><li>目录结构，安装完 Hexo 后，会在安装目录下有若干子目录或者文件，比较重要的有：<ul><li>_config.yml：Hexo 的整体配置，比如语言，采用的主题、git 的仓库等内容；</li><li><code>themes</code>：可以安装各种主题；</li><li>主目录下的 <code>source/_posts</code>：我们准备发布到网络上的各种 Markdown 文章。</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;这一部分，我们的主要目标如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装 Node.js、Hexo 和 Next 主题。这样我们就拥有了一个阶段性成果。&lt;/li&gt;
&lt;li&gt;配置 Next 的重点参数。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="应用程序" scheme="http://tohnee123.github.io/categories/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="云服务" scheme="http://tohnee123.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="github" scheme="http://tohnee123.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://tohnee123.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>第三只脚</title>
    <link href="http://tohnee123.github.io/2019/12/12/misc-notes001-00017/"/>
    <id>http://tohnee123.github.io/2019/12/12/misc-notes001-00017/</id>
    <published>2019-12-13T01:35:33.000Z</published>
    <updated>2019-12-09T23:02:19.227Z</updated>
    
    <content type="html"><![CDATA[<p>两只腿的凳子是不稳定的，甚至站不起来的。但是在市场竞争中，一般最大的就只有两家。快餐最出名的是麦当劳和肯德基，手机最出名的是 iOS 和 Android，服务端操作系统最强的是 Windows 和 Linux，电脑芯片最棒的是 Intel 和 AMD，国内最大的购物平台好像是京东和淘宝。虽然也有一些其他的厂商有很强的市场影响能力，但一般是两家瓜分了相当的市场资源，并引领市场前进的方向。</p><p>今天主要想谈谈技术的事情。很多年前，我曾经关注过开源软件。当然由于我自身的缺点，后来焦点慢慢离开了技术的范畴，所以没有太多能力谈论其中的技术细节，而是从一个外行人来看未来技术发展的期望。</p><a id="more"></a><ol><li><p>开源软件在管制的世界中开辟了一个自由的空间；<br>现今整个世界我个人感觉是朝着控制力加强的方向前进。我是一个技术爱好者，不是一个政治方面的爱好者，所以不想讨论这个方向的对和错，但总是感觉需要一个技术上的自由世界。开源软件的出现，当年应该是有很强的<strong>反大企业控制</strong>的市场背景。也就是只要你有能力、有技术，你总是能够找到足够的工具来实现你的设想（虽然不够精致）。</p></li><li><p>开源软件需要真正自由的土壤，把开源当作一个手段是很难有美好的结果；<br>在这里我想先举两个例子，就是 Java 和 MySQL。从技术上来说 Java 是 Sun 推出的，后来被 Oracle 收购。迄今为止，Java 依然是开发语言热度排行榜上的第一位，但是只要看看最近这几年的排名的趋势，我认为 Java 被 Python 超过是迟早的事情。当然被 Python 超过本身并不重要，或者说有多方面的因素，但是这几年 Java 的发展不能说不受到新东家的影响。另外一个是 MySQL，这是一个纯粹意义上的开源软件，被 Oracle 收购之后，MySQL 的开发者一怒之下，发展了一个新的数据库软件 MariaDB。我认为其根本原因在于对大软件开发商控制的明确的不信任。<br>这两个例子充分说明，如果你想拥抱开源，首先需要的是你真正拥抱自由，而不是把自由当作一个美丽的外衣，或者是实现目的的手段。如果只是把开源当作实现目的的快捷方式，恐怕项目持久生命力是无法得到保证的。</p></li><li><p>开源软件是自由的，所以需要对人性的充分理解；</p></li><li><p>开源软件是自由的，所以需要真正的学习意志；</p></li><li><p>开源软件是自由的，所以需要工匠精神。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;两只腿的凳子是不稳定的，甚至站不起来的。但是在市场竞争中，一般最大的就只有两家。快餐最出名的是麦当劳和肯德基，手机最出名的是 iOS 和 Android，服务端操作系统最强的是 Windows 和 Linux，电脑芯片最棒的是 Intel 和 AMD，国内最大的购物平台好像是京东和淘宝。虽然也有一些其他的厂商有很强的市场影响能力，但一般是两家瓜分了相当的市场资源，并引领市场前进的方向。&lt;/p&gt;
&lt;p&gt;今天主要想谈谈技术的事情。很多年前，我曾经关注过开源软件。当然由于我自身的缺点，后来焦点慢慢离开了技术的范畴，所以没有太多能力谈论其中的技术细节，而是从一个外行人来看未来技术发展的期望。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="随笔" scheme="http://tohnee123.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>如何建立一个类似这样的网站（一）</title>
    <link href="http://tohnee123.github.io/2019/12/10/web-howtobuildthisblog01-00002/"/>
    <id>http://tohnee123.github.io/2019/12/10/web-howtobuildthisblog01-00002/</id>
    <published>2019-12-10T13:18:08.000Z</published>
    <updated>2019-12-09T22:38:09.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源起"><a href="#源起" class="headerlink" title="源起"></a>源起</h2><p>很多年以前，我就想建立一个类似这样的博客网站。大致有如下的要求：</p><ul><li>管理方便，能够从 Internet 访问，对手机的支持友好；</li><li>费用低廉，我愿意付一定的费用来满足拥有自己博客网站的小心心愿；</li><li>内容迁移容易，即使内容再糟糕，也是自己一个个字码起来的。如果主机不得不搬家的话，内容也需要比较容易迁移。最好的形式是可以在本地进行内容的编写，然后上传到博客网站。这个需求以前大部分博客网站支持的都不好，主流是在网站上进行内容的编辑；</li><li>界面美观，不用花哨，但要显得专业。之前新浪这些博客的问题是过于花哨，没有美感；</li><li>能够方便的支持丰富的文本格式需求，可以支持数学公式和代码格式化；</li><li>能够支持留言板功能，方便讨论问题。</li></ul><p>回想一下，以前要找到这样一个博客网站，实在是不太容易。直到 Github + Hexo + Markdown + 云服务的出现，实现了上面所有的想法，而且还支持文章目录跳转的功能。现在这些功能都是免费的。真是太棒了！</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>当我搭建这个博客网站的时候，我大约知道如下的相关知识：</p><ul><li>有一个自己的 email 地址；</li><li>知道 Github 是一个代码共享库，自己在电脑上安装了 Github，但是具体的安装过程和指令早已忘记。曾经在 Github 上建立过库，但是几乎没有使用过；</li><li>Node.js 听说过，只知道名字，从来不知道是干什么用的，也不知道 npm。对于软件包的概念，在使用 Linux 的时候，用过 yum 安装过 Linux 软件包，没太搞明白背后的原理，基本上是按照网上的指令在敲；</li><li>Hexo 从来没有听说过；</li><li>ssh 用过，也是敲指令的水平。背后的机理只是知道和公、私钥相关，其他细节一概不知；</li><li>会用 Bilibili 看视频。</li></ul><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>我在学习一个新东西的时候，最怕别人给了一大堆资料，然后开始依葫芦画瓢。做到一半的时候发现面对的情况和资料中的内容对不上号，没人询问，也不知道该怎么做下去。开始网上查资料，先是用百度，后是用 Bing，摸索、困惑、愤怒，最后放弃。这个博客是对自己学习知识的一个总结。我计划把不同的任务分成若干步骤，既方便自己的理解和记忆，也希望可以帮助其他人。这个博客网站的实现包括以下几个步骤：</p><ul><li>建议一个属于自己的 Github 账号，并在 Github 上建立一个特殊的库。在自己的电脑上配置一些关于 git 的参数；</li><li>安装 Node.js、Hexo 和 Next 主题。这样我们就拥有了一个阶段性成果；</li><li>根据自己的需要，配置 Next 主题的基本内容；</li><li>根据需求配置一些其他的高阶属性。比如进行在主页上进行缩略显示、增加搜索功能和支持留言板等等；</li></ul><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>网络上有大把使用 Github 和 Hexo 设置一个博客站点的介绍，我不打算花时间重新再写一遍。所以关于大致的安装步骤，请点击以下的链接。这些链接都是我在设置这个站点的时候使用过，或者后来浏览过，基本上我都可以理解。</p><ul><li><a href="https://blog.csdn.net/The_lastest/article/details/70001156" target="_blank" rel="noopener">1. 注册Github账号</a></li><li><a href="https://www.ezlippi.com/blog/2015/03/github-pages-blog.html" target="_blank" rel="noopener">2. 利用github-pages建立个人博客</a><br>  这个博客的内容比较完整。有部分内容在开始的时候可以不用看，这样我们可以快速的完成建立博客的目标。另外在建立仓库的部分，有一个现在 github 配置要求，这个资源没有提及，需要特别注意。</li><li><a href="https://michael728.github.io/2019/05/19/hexo-blog-full-note/" target="_blank" rel="noopener">利用 Hexo + Github Pages 搭建博客并优化 Next 主题教程</a><br>  这个网站之前我没有看到过，人家2015年就建站了。发现想要做的事情和我一样，但是比我做的更优秀，是我努力的标杆。放在这里一边学习，一边参考。</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="重点步骤"><a href="#重点步骤" class="headerlink" title="重点步骤"></a>重点步骤</h3><ol><li>利用自己的 email 地址，在 github 申请开通一个免费的账号。这个在资源 1 上有足够的描述信息，按照它的步骤完成就可以了；</li><li>进行本机的参数配置，包括 git 和 ssh；</li><li>添加 ssh 公钥到 github 中；</li><li>添加一个 github 仓库。</li></ol><h3 id="关注的内容"><a href="#关注的内容" class="headerlink" title="关注的内容"></a>关注的内容</h3><p>为了快速建立博客网站，只需要关注<a href="#资源">1号资源、2号资源的第1部分，第3部分、4.1和4.2</a>。</p><h3 id="关注的特别问题"><a href="#关注的特别问题" class="headerlink" title="关注的特别问题"></a>关注的特别问题</h3><ul><li>在本机上安装 git。相关的安装过程，可以根据资源2中的内容，我之后在学习 git 的时候会再说明；</li><li>git 安装完成后要在命令行进行配置。指令如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"Your Name"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"email@example.com"</span>   //这个 email 地址与申请 git 账号时的一样</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">$ git config --global user.name    //检查配置</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">$ git config --global user.email   //检查配置</span></pre></td></tr></table></figure></li><li><p>在本机产生 ssh 密钥。由于我们的博客是放在外网上，一般在上传资料的时候都需要输入用户名和密码。但是由于资料更新频繁，每次输入这些用户名和密码会觉得非常麻烦，所以我们就可以使用 ssh 验证的办法。大致原理是在本机产生一对密钥（公钥和私钥），将公钥上传到网站上，私钥保留在自己的计算机上。这样每次上传的时候就可以省略了输入密码的麻烦。但是一定要注意保护好自己的私钥。如果私钥在设置时没有密码保护的话，私钥一旦泄露，别人也可以完全控制你的网站。另外，也需要注意要周期性的更换自己的公、私钥对。指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"邮件地址@youremail.com"</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</span></pre></td></tr></table></figure><p>然后系统会要求你输入加密串（passphrase)，这个加密串会让你每次使用该私钥的时候输入密码。因为现在还在学习这个系统的使用，所以没有设置。从安全的角度，最好在日后实际使用的时候，设置密钥保护，防止私钥遗失。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):&lt;输入加密串&gt;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</span></pre></td></tr></table></figure><p>在这步操作中还会有一个问题，就是系统原来有私钥怎么办？在资源2中，他把这个私钥移除。这不是一个好的解决方案，以后在 ssh 的学习中我会学习该怎么办。现在先麻烦一些，按照网络资源的办法操作。</p></li><li><p>在 github 中添加一个仓库有一个关键的设置，就是 github 包含的仓库名必须是 <code>&lt;longinname&gt;.github.io</code>。之前在设置的时候，没有注意 loginname 的要求，结果花了很多时间。在资源 2 的描述中，这个关键点好像没有涉及。</p></li></ul><p>到此为止，github 的设置已经基本完成了，也就是我们为自己的博客站点找到了一个家，但是所有的基本设置才刚刚完成一半，目前还没有办法使用，欲知后事如何，且听下回分说。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;源起&quot;&gt;&lt;a href=&quot;#源起&quot; class=&quot;headerlink&quot; title=&quot;源起&quot;&gt;&lt;/a&gt;源起&lt;/h2&gt;&lt;p&gt;很多年以前，我就想建立一个类似这样的博客网站。大致有如下的要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;管理方便，能够从 Internet 访问，对手机的支持友好；&lt;/li&gt;
&lt;li&gt;费用低廉，我愿意付一定的费用来满足拥有自己博客网站的小心心愿；&lt;/li&gt;
&lt;li&gt;内容迁移容易，即使内容再糟糕，也是自己一个个字码起来的。如果主机不得不搬家的话，内容也需要比较容易迁移。最好的形式是可以在本地进行内容的编写，然后上传到博客网站。这个需求以前大部分博客网站支持的都不好，主流是在网站上进行内容的编辑；&lt;/li&gt;
&lt;li&gt;界面美观，不用花哨，但要显得专业。之前新浪这些博客的问题是过于花哨，没有美感；&lt;/li&gt;
&lt;li&gt;能够方便的支持丰富的文本格式需求，可以支持数学公式和代码格式化；&lt;/li&gt;
&lt;li&gt;能够支持留言板功能，方便讨论问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;回想一下，以前要找到这样一个博客网站，实在是不太容易。直到 Github + Hexo + Markdown + 云服务的出现，实现了上面所有的想法，而且还支持文章目录跳转的功能。现在这些功能都是免费的。真是太棒了！&lt;/p&gt;
    
    </summary>
    
    
      <category term="应用程序" scheme="http://tohnee123.github.io/categories/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="云服务" scheme="http://tohnee123.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="github" scheme="http://tohnee123.github.io/tags/github/"/>
    
      <category term="hexo" scheme="http://tohnee123.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>每周和女儿交流的提纲（2019.12.14）</title>
    <link href="http://tohnee123.github.io/2019/12/08/family-daugtherweekly-001-00011/"/>
    <id>http://tohnee123.github.io/2019/12/08/family-daugtherweekly-001-00011/</id>
    <published>2019-12-08T05:29:56.000Z</published>
    <updated>2019-12-14T01:29:33.556Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">请输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="cda7ea7306b2ec06a1dba7ba66768317ca4517e26d3d1e2378e41ab7dab54f88">72e53b7cd47eea771ad1640871e3491f1a3e165d654e81f6682b39b6204c32c6b909e86b32bb50f40937658638d91765cb69d477fab90a308d35f193f4a03f3e3b449e9a674b57a84e0028357eba24d55655995c5f7256b503bed283dd9cce8580f5409d3e610bd68f00f150e1a69467476743aa5c619ccf4459cc53698b497705194127c336ce500d38d1674f0164728744e7a61e6264f4a197c98f0e7ac766c67cdf6fbc9b9103f106f6d083293e226c41ca241c188872288eed645cc63c8012308bb0b3fae351e4e7ef0e288324b97a5c1b7ded6e6adb92e95985c65646d8f8369670eb44ccd8f838915122034e4c938ff2a19a887607be6e0eb9445b37a28aa834d8d5ca495111c757e6f959248fa2274fd7c62cd330727138569979e1e7d86d683a859511e9f2fecdb53bba4310e35ae2ca7312389cf64519a6271044b7df093ed046f0e5747b3f0b2d1b68f325e166317a354b70b1efbbafece80123725c2012cd54bb229ca46f53b342c0a0acef808d723203d29fccab1f6cdf563aa8088aea0c8e3d80f769d16af04d4d1de3312307a2b5ac6fbda02e53e76b2cb17927ccfdd6312f1a4b6226f42aefec379dd531bbd12ef5be80d47b3601182ef45aaac86539694a2ba07d9d76d5bfab1119c87814cbfd865fc91364954c8f9352b286ec5329f08bac4050f44485478e40fd9de4cb8d2df360a5b3120cc52c7f5d526cacff58bd24f614f2711c5770f19ef9445f858ff10c8ef32c7f2fb564e8fd4631953601d722c31450c49a5727a110fd82689955bd4ba026cf5c9b49ef483ac1ae95a99d79c165932045da4ad987108d54fc9384717cf275933f87f84676b4d0edfa61175332f70f40951f9769ef99d05521925312b2985b38f957b3129781cbc823f70769be7294083ac7e8c55a3d1868a586ec820e4ce68c24ace409dab01d0366f204ec924e18661879e345776ec9607fa1da1167b370ecd7893c5d2b6e2e6a3e1aaebea58720dcd4c6b3c9ea3732192a529edcc91770cd64fbf786ea5ea90cf7b2e06097abb5780c89677db6fd6ea5239ae85bd394da59684de6602742c1fecc63c3f3a7e0c072f90e15ca4deb49c077fe76fb3bbc0f108ff8da8542df3b1f899b804f6e20f35482c43120fb3024c65f967c194fb324098d50f76bcebe95690a2647d1468029a8fad52350c4b83ac9342b09933e51ec420036d896eb459213a072ae7bfc7291a08e0a541807f093da643ee2a576714d28b8dd36f31bb7414d1532baac99dddb4706e91fd635f7be7b4aeaa611b44ffcd5fc725285fe4109260011913285fa91461eea062e7b71b8abd6a90b64f24eb2c02b5d80546e836702cfffd528644c3bd1087b7eeee15bacbfe75b7008ec1cbcd7328703e2bef37334b5f5a2628b58868c2c0de15ab7ba7b0803706054b80db558e6be55421e9dae6c8b627e2b836698a01bbc9b78d378d772be0a6506fd2a196a7818c7651794ef2b969a3c0d84bb2f32eb03f99967fcc4d1c737ce286302c36ccf1bede2822ff81bd5ad8a80cca92c93e08c5381ca3c88137ad129341140dbad1684429194549276651404157740c148f71735d0e7b503f004b1e675921325610c25a2af794f07ce0ef884bccb91c83dfe63904f1bd2962d56401c5764f5b27fbb20f462be22f821543afded8bcf62d4c422e33bcce5d17a0554c89dd7e7de36468b93bc289e067ec04e5f1ab2091d8adca98531860ef606cc3fe7753336d035b923480e949849b7c84ba093df6786ff08bfe8f2adbd4e9e094362b31a19c718fdc326dcfac8ef82767652f4083d4778a261fa861e5908e1916b8083658b6d7da6b1906493ca0387fd16bf06efe8e308101ebbd06d1d404a011405bb89438077da0a7ac97584f5b2ff0aa268c742bb8a1b788686df0259d91d64c3e1f91a55cfb777669fc6ebfc0d2f8068fa83cab67f240411d2ecbc3c5e84daecb0fc03bb58c0d5fd94b35b22f1dfa3023117698b3499275e783379b093029570306d3a782951d2fc63cfd3642d3c76edf172d6e0e181875f5d8e1407a94ff77b0c7f480e6eb1352696fdbec24c5743e706962fec04617de2504ec4dae62cff633454fb31c40250957b33646b899537aa0496193ce7b9058b3b17dd7d03d1eb5b7b4b10d6a3c9bf50e125a25dc03e05a280ed09e632f85c0357deade02ba2666ec0229c13cc81f26dea0b7ea767fc760bf07f185ad329915dab696d4eb883830fa3e38dbe98be1f51a59c272552e0b12ece6f260cde088487559261c43bb4ce5e8a0877d1b2802e59b95541c91964f8a25ebeae62a26cf66b10bdc77c3516d2d65da375be80328c290e9da9be4275a8d19ecf491057a299df30b1a29e7f103958b52b2a8f2f8d607f0a928046b008d46c193f4fdf0f6442b83013421cd97514ec47ca4352b3cbb02c7ba4503fb9b15300a9f4287ee30914e039ffc82771fb541495122efa46dc95b47183f9f4e2ec07dd04f31b7af3dd1f389f6a0b93e12e8c972ab2fdc0db6f869266b2a635086a03047a36c4987fb2a09bee02a10a41bc070035d490cbe0c5b83c36226c55ee2251dfc513fa964eeabf9491da77ac85c0762ac7f5cde205ad17508db0e571be9b5fd61419b8fd54d6bce055241fb3822578887cabacfd1cc1a6643a90ceb9497dc9e376eb71b697fb62506736c3b6872d284e57fd5e0c470ac7a6f7a248b12e3ff0d161723c60d146e90f2e2b1eb37b72285d2bd53e0a18ca54230514c171536a2c133e0a1ecff18885ab422033c2379102b2b289f3d4466e10165ff6efd86c2ccaf0d4db73229f4beb47f6ecafc8684d9d32da41167fe3d04efe7ec7f40be5092fb3a364885367cb33ef3cc419ba87886f9dc6756d3c6ec6d88e29e69ea4abe5d880659dbe09eb56c42b3e30879e9ed0c93fc85c7b6cbd5260ec1bdacac37933e38034d425ae0ed2ebf41d9cf13d53cdd1ec91c7c33f86637356c399ad3d0c5412da2c992f82212689e27826ce8f7a9c67b889dc5becd638b1cc368403c0284899ce0fbf03b23abaf92faaad7c2fdc9f6d7808ecf27cf8027d9de9b76f2b4b5ba746ffcdd16508d9a39ef148537e8092df43b5c714bf91b2b6bb31b9f8987e73330c74ee3d9d0378e27c98211232dad48cae7f613df64e405828eb311f339417972472e78a7c93750967e880531054411de2cb1be7952a79bbe6c50a030b9afa9d2138bf6555ce1c3020910eb82e56085f3cbdb4f15352b8d9be34caf9f23f65d8090dc24d993b5166e68367cb67ef97e40534f15eb7c47ad7b3b2ef82ca29ec5cf38ed2890b9cf3d9766bf83b85edca7747bb3cddab7ff103382ecd1eaa8ec97a0ef6ccf6ecc478f116fa691a9b3585051b20bbc7b655d8f19bee2f8ad907e64a5e4ea65caed9d9e3587ccb8175601f69c788c94adc8c6bf2cb8cc5469dec5bbfdce5560a220fa2468d25f5e9d9697837e90eed869c709952f843d5873097480d42e40e201b11017ae15b935c68467a61dc6f5d27bc6970f23dbfdceb5f3af0dac4403b7a7c9485693305a1f4c5ac1b4378e68cb3ceaa3806291b66ca1764320f8979a92568d760ffc7f4911ada64945afea65ae1ab3330d30d5e9bef9bc89bbaa1f45efd6fa57c252da8bcb0590410d91d89332f89fea971680945e870442a2ece8c252da6513a13c6a258d408f6cafe5dddc4d1dce58fbfc555041adf019d5e63a360633e6ded07c44ededbb70eca3041ad30f0321255892d7f0f9cb7824e03cd1679334fdd672a7f78f3bb8a26af4017b951cac04ce673771b2a150ad1a2960a49fa609cc0e60f29d095538d325c0e88c9b7b50c1eb5f1b11ee5e50d9fea77c27d0edb40c794c661135d49c703467962fc8ac5684027a675d94a2436df8e4ac8d1cf40adeb96b4ae5a017faabd888a7d746d81a008f2e7c5c258c13dbadb405a1eebd96750ab08a9746e32806a2a532fbe0bba696ed7da15d8124fe86bef63ea4259a361f6bd790653278c4aaec407ec82221dabfaae1bab17792b878d242deb11be2e52c8a623e7528f64e915c400b5fbfa3b0937308b955ce3c5972b9f01e6f84eb51d9a20a0120e2cb53ae1e226efe78caf38663ed87ccdff39e4f77e0e63c6026f8c61c478a77316f4c8b6e71cdea2bedddeee879a6f05da9a41eb5bf1de9baf30dacf85553fcb153849e7f12c9e314a79db30f15610c1194cbcde80dd1c0f3a7389ab0c1081954cc020120a10b32a7d6298af0722192768628272183c2c90fb54dae0230432894c00eed506c39321371a7f432cabcf702e105fcc42b6f3bb28fd6e795e5e70838b4dfc2d50879b005cae1028720d72314455edf16f51ab76d12307c9de0f074c39fefb0531e5cee6bfcbb271e89e7d3a27119bd3d8cb51bcf5990481d76a36f5e60c981cd35f09d6b5f1a67b712505cd48f55adc9acc3f724fd60f7b814c51d5734da00fc064361db852710c94076f35f7e7792c68ce017c395f919398e019781a0bc49d1377fa1a6fb8d71201f93e47bfbe339352dbd81707d1876dfa835e6419d615dd56db4f4a2c6f2310e34bdd03fddb77ded3ff2d683b00a948ac48d6475f9ef91815e38e968deacbf48f44049a6dfae2041528a97dcf348981faa3d66464efcfad620a3923fc5f91bb0cd00836d8a2961b58540381e9e81bb9e8baa4b77545b5f90c7177bedc05710830305277aae444175822466ff85bda0c9b03f65771e01d2cd3e5318c5886d1721ecbb3eaf2d63194d5beb3918c904da42e10c1193276a82f354f9f5bad4e3fb17b2eadb78dca92c29d70a941722acdb55c3825fb38d7510f6c8385088b03bd56ddcee0ac1252d923775bc52a59d89cac6526371aea21881fa169d7cc723ccd4944fbd908fe3416d21bdfd0c193440d808284482c479a06a65260bc0b085f4a2f1cc56d90a2a7f30c90792a9de6ba6e6efe7bea0e74bbb5c882f24450f081008309951cb7ea6e33902508f1e25e58ad93710797b2f55d29b91742aceb912087fc35d720a89e5a32e9e093199473ad6027ea08d250c4c8c85f5d77114c3f7c53af43d0f5e529aef245833ca3a6913f37b19a16d643db7f374f70be331cb69d772d0ae5d10bd3e145119fe3d56625615dd2a94482fb75678d2776f1d31f2d3a555eca87bf6c65cb2ab67da4865c0529e045d8ef62b9537b0d366b9161e7c0bb80878616cfd218cabc1cf3489126e4edffbfa1e4ea2c38026e66d181b4701375da00826c3bfe8a28b4332e10cc51181de6ddfd0c817813a6a3bb553c0748086bd9f60961bc5e559d50017504b06ab4a61aa1366f19eae08b1b74e435f3454d9c95ffae5923d88d6082005ae7b49445cba889021de9f135b31c48085e99daa34e5577c8ad2d42a01f426e5d0b55d04227fbc58205eafd7069957be8ebdddc8367143a2d58e60c7b7546d4482539376461a9cf04dbd8a811e4aaa47706a26551abbbf7ff92acb9a59032024d138b852cdd2c081d39ddcfc7249432f4065574c40c861162f4eb57c51f066b51b69d816f59dd78673dc02b5ab15a9b374b6f5f08b3a3c651698afd16636b62b8bc2c2546287e922da67a2a810051a82a80c66291d530702907fb8b661020e2ebcc23d01667323c4def2c25f26162a466f5c3950f6ec91a3a8763ffe80b17195ceb2ffc58b466c78a2802baa63c82508e5cac8a0740ac6222e924999c30d4a009bc456e4d0e0b5527aed59de9147ece6aff31745d6d4ad403e601a21056cdd42b0ee2f2e3c73432c324776d36e63f26f7f54ce415c7ea14c1a1507f85e2f179544f339ed15525e53402b4664b2b898b27967c4d957e012c93295129625d30dbd2a701c460155fb3614d75f3f00809b3935ba917f298d96530ffe2ae1e746d3abe4c21107a7dba1ffdabf21d2403c21079f9d928d89adf5ab36da5a06704c664ddc6876487389456c2ec3e1863ea4d371c9dcfaf166e7472d5fcbc114810ce2bc5d927bdffff478bce701e7bf35187cf275c910d9fb2c946726ea3c27bfdf3dd9241d94f66ad7c096e9c97d5bc229525724e912e5aa22db7194b6708d3d57b15048693f2e9e103e54c91647cdea6765f493531f9e1cd6d467f17fc06e921e71ecc3d6814469136933304a9f1b95ede8628166cca05bf6a673cfa4305c6ddde2211dee04ec57ae7e0e67c39769de96b2b164607639e633b2d2478367d76ba4a1f4be209feac508f07ff1bfaa8388aa6ba299691f2b714548ccf5c4736f1711ea75e9edc5ebe35cbc629c9f1ebcfb41aa8e35be8e1fbf1368b73fab17bb820be1904abb9301b363bb5debf58a25c90f2e06b1fec591b768839e726a24e8ae6bbc9c52c97aad9910a5a6cf73920d4bcf1d7ff294584e3ba374696d1cabb98ad34a63c3e96ae5b1925b2566eeb065c21358e4e9a0d778afbe8e58c333132d67b67a8a8b8115aeb6158456483c7dcd97c404cdc233ea4f774c317efcebc8be67205392642d014f526fd3504991a714024d68a737f5b9fbcfc2dc7668d0d6b2a2c2185bb607c09a9dbcd4237d414519437edc72e687c0d1b2bd0f2f24630637ba15838e82d26a19c60bddf6e5f0899176e6c6def9f8bcc6acc1178554e0d3d3331a12a5b01b0622f2c64cbcb2b7a847e64ecad552b0c72670d7edd27707514e6f39b7de81cd4f0ff3640a0b90c93f60f667db27c8a0c847b21a0f46492cbbebbd2b2416cccadf9b774f44ad54328f765662576259fdf9083647fc23076fc81618f371eba1e479f8222a0c2869d4806b7b545c307d228968e32846fe4ef8a42b938f8a69827911139808c106ea6ca233fcdac475b90f3640af975e457eab656e23b5817cc0c0cdeea97210f45868f1b5aff6660027e46a838c1f86f7b67cb88b3e25f20339e8d556f3594f83c819b7d07817ca2bb455d71a4dcaa5487fb36a4d3ca2a780b5afd16ccadb21e4e0848f8e8b6ada39121969719669fa32190168e86296864966ba0f5da693a0fd23b15881708757b091052eb03d55b4f5900a4e6671e732cfdebbf7171cfe6ae74456203a6ab1524d3f8f76ea8f577c77a3519eadcac9f21b26996e0aef6e53ba7e4144c4b7f8613ad5b9c769c1fa48d6ba8dd35fc72d0c1c36d8cc262d3ac89194d487e2eb4baed92d4d96da9be17dd28786e9f3a41d6ea596ac93c24495bbb8942561121231092ce4bf683213aa5e058441625e82bb342b8b9e442c5fc7cc8d45546fa205970ce236be47b384e157495f9e2fb57b4a7ac09f732673a36b1d36063e204ca7d468536fc34513fcb5637f08584a5293493e8ba305811318135f9525b4ec9f20732183734c1c2090eff2466b83ed3534bc13cfe1d55f0a32d53b0062520886fba3fb3c63be919827230c8f6342a868181a547a54d4618544cb53c46e5f2963fb8a6d8577a02df8782ae0310e9f0e4f5c17c401c417f536feffd4248e598a0325475760f13a36b6dcab3a77cee9f1746cb27465e5fde6f17df1a3087ca871602a0993ccffe59a3f64ce0622c1fae3c22ed1d480d0e2338d55df526767019c98fdfcb57f504d16dd5b6f12a85bda105db64e331beb564ff7c47ac2faafbcdc6e3e5e55d8a701d2acdacafb1cb431d302b0197fc8cc8c61f70072a9683ba1bbec1fe35e3acc45d2e3280a5d9b65f4947485face12c0c26c14b2c95f33779732069d056cac94ec723e2f0eedbf6a14527e8bf029dbc3b75e70d2067bf9332bad08df76929e45573e38cb47a6c3d8e9c0b5c13f7d20b7caf126cdfc707722ea09cd1a6b298cfc80b2a5f7d62051d15dfd2d2a3cbe0cc41dc6cbbce23fb3d5bdf7de229010e7e2e788036e20015d30c06020701c8</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能尚未完成或者涉及个人情感、家庭交流或者其他不适宜公开的内容。
    
    </summary>
    
    
      <category term="家庭" scheme="http://tohnee123.github.io/categories/%E5%AE%B6%E5%BA%AD/"/>
    
    
      <category term="女儿" scheme="http://tohnee123.github.io/tags/%E5%A5%B3%E5%84%BF/"/>
    
  </entry>
  
  <entry>
    <title>我的时间安排</title>
    <link href="http://tohnee123.github.io/2019/12/06/misc-timeschedule-00010/"/>
    <id>http://tohnee123.github.io/2019/12/06/misc-timeschedule-00010/</id>
    <published>2019-12-07T02:58:19.000Z</published>
    <updated>2019-12-07T22:20:02.779Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">请输入密码，查看文章。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="42e53bb9e459b425bb828cf20eed0ab6347454e4db22d79897cef4f75613a6a0">3954e836ca03f7d63a021096d57924d08bbff83c0dfe1d7c56d971bd8d648b0db17b07610214f358f54045c8c6aaa020018a6cc35ec2bd89b6f7881a5d82499365ad29592367aa3af038153453f9db297bfdcb66b26f1aedf73dc38f13253e49af0ab016ddc5c4f3544397aeeee9e02589210370ac90c879cf3a2b4669102d63f840e82ace5ba5b35ffbb4d62b75abc42c2d283b54d557ef489b9dbe6c9063ca7959c378eaf949a18821856a845de80ecf4e337aa76633f3b246bb72ff1c9938b11cd61b7f50d526f92fe3d6f6d3bbe62f9312cc37b3b4da03f3b42c1e919f53603166dd6b7af8b799fa1fe768284f2686ecadcad492165b81f5e33c44d4c5636723372d13e7d06198a23ac4adcfcefff2d617f5da656336c4e3571e33450579b8624f04e215517681102509bb5e41032eb3b63928fc78ff25f0ac7c348a5c5d642a50fab521fffab7d94e50988ec3818937ab0c3a3ed1051b90a8531c2cd4651c5b1021c9f921a0a3c07e37a181ae3cc36c6a90210b21be36ab71817859bedb213d99476c441749f01b5d08434c8b3781557120e3980693086755c00a794d93d17b26308cd922d58d17a7b0c6fb318b0e3c60a31dbfec0efa374c52c1fa2140e7297172015446a052cd15e2f7102607200f4dcf9e45e793677792e259e3350ddcc27f472bdb7b24280bf53629c612f9d22e83f76250e4f2d450e6e30c7555f4</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      这是一篇加密文章，内容可能尚未完成或者涉及个人情感、家庭交流或者其他不适宜公开的内容。
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>这个博客的一些惯例、约定和更新</title>
    <link href="http://tohnee123.github.io/2019/12/04/misc-blogruleupdates-00006/"/>
    <id>http://tohnee123.github.io/2019/12/04/misc-blogruleupdates-00006/</id>
    <published>2019-12-05T03:56:40.000Z</published>
    <updated>2019-12-09T17:46:38.637Z</updated>
    
    <content type="html"><![CDATA[<p>为了更好的使用这个博客作为我学习的工具，有如下的一些惯例和约定。</p><a id="more"></a><h2 id="有效的标签、类别"><a href="#有效的标签、类别" class="headerlink" title="有效的标签、类别"></a>有效的标签、类别</h2><h3 id="可用的标签"><a href="#可用的标签" class="headerlink" title="可用的标签"></a>可用的标签</h3><ul><li>博客，云服务，Github；</li><li>Linux，Python，CSS，JavaScript，Hexo，AI；</li><li>线性代数，微积分，概率论；</li><li>女儿，老婆；</li><li>更新，计划；</li></ul><h3 id="可用的分类"><a href="#可用的分类" class="headerlink" title="可用的分类"></a>可用的分类</h3><ul><li>操作系统，服务软件，开发语言，应用程序，基础知识；</li><li>家庭，随笔。</li></ul><h2 id="文章的排版规范"><a href="#文章的排版规范" class="headerlink" title="文章的排版规范"></a>文章的排版规范</h2><h3 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h3><h4 id="全角与半角"><a href="#全角与半角" class="headerlink" title="全角与半角"></a>全角与半角</h4><ul><li>如果西文占主要内容，则除引用原文外，采用半角标点符号；</li><li>如果中文占主要内容，则除引用原文外，采用全角标点符号。</li></ul><h4 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h4><ul><li>在使用项目符或者顺序列表的并列内容中，前几项结尾以分号结束，最后一项以句号结束（如本文展示）；</li><li>各项内部采用逗号或者顿号分句或者分词。</li></ul><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><h4 id="段落中相间"><a href="#段落中相间" class="headerlink" title="段落中相间"></a>段落中相间</h4><ul><li>中西文（和其他西文半角符号、行内公式）间留一个半角空格；</li><li>中文和阿拉伯数字之间留一个半角空格；</li><li>中文文字与全角标点符号之间不需要空格。</li></ul><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><ul><li>正文内容是列表形式，缩进于临近标题的内部；</li><li>正文内容是文字形式，不缩进于临近标题的内部。</li></ul><h2 id="文章和博客的更新"><a href="#文章和博客的更新" class="headerlink" title="文章和博客的更新"></a>文章和博客的更新</h2><h3 id="更新级别"><a href="#更新级别" class="headerlink" title="更新级别"></a>更新级别</h3><p>因为是我的笔记和随笔，所以会出现部分文章发布之后，会对部分文章进行一些更新。每年的文章和博客功能更新我会分别放在四个季度小节中：“xxxx.01” ~ “xxxx.04”。</p><p>由于更新内容有多有少，为了让自己和访问的人，不要浪费宝贵的时间。我对所有文章的更新会进行一个主观上的分级。<br>0级：只是一些文字上的调整。<br>1级：少于 10% 的内容更新。<br>2级：有 10%～30% 的内容更新。</p><h2 id="博客的更新内容"><a href="#博客的更新内容" class="headerlink" title="博客的更新内容"></a>博客的更新内容</h2><h3 id="2020-1"><a href="#2020-1" class="headerlink" title="2020.1"></a>2020.1</h3><h3 id="2019-4"><a href="#2019-4" class="headerlink" title="2019.4"></a>2019.4</h3><ol><li>增加了我的豆瓣电影功能。目前主要的问题是 OSX 上 Safari 浏览器和手机上的所有浏览器都没有办法显示电影海报的缩略图功能。由于我使用的是 Next 7.6.0 最新版本，网络上的大部分方案似乎都无效，估计要稍晚才能解决。</li></ol><h2 id="下阶段的计划"><a href="#下阶段的计划" class="headerlink" title="下阶段的计划"></a>下阶段的计划</h2><ul><li>[x] 实现部分文章的加密功能</li><li>[x] 博客增加我的读书的内容</li><li>[ ] 将部分类别移到左侧菜单栏</li><li>[ ] 博客增加数学表达式的支持</li><li>[ ] 博客增加留言板的功能</li><li>[x] 修订本博客的建站指南</li><li>[ ] 增加新的 Linux、Javascript、CSS 的内容</li><li>[ ] 决定采用哪个留言系统</li><li>[ ] </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了更好的使用这个博客作为我学习的工具，有如下的一些惯例和约定。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://tohnee123.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="云服务" scheme="http://tohnee123.github.io/tags/%E4%BA%91%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="博客" scheme="http://tohnee123.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="计划" scheme="http://tohnee123.github.io/tags/%E8%AE%A1%E5%88%92/"/>
    
      <category term="更新" scheme="http://tohnee123.github.io/tags/%E6%9B%B4%E6%96%B0/"/>
    
  </entry>
  
</feed>
